#!/usr/bin/perl

use warnings;
use LWP::UserAgent;
#use LWP::Protocol::socks;
use JSON;
use File::Slurp qw( read_file );
use File::Basename;

my $userpass =  $ENV{'userpass'};
my $base = $ARGV[0];
my $api = $ARGV[1];
my $maxgasprice = 10;
my $cwd = dirname($0);
my $json = read_file("$cwd/margins.conf");
my $marginsconf = decode_json($json);


sub getgasprice {
    my $url = "https://www.etherchain.org/api/gasPriceOracle";
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "\nHTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub apipaprika {
    my $url = "https://api.coinpaprika.com/v1/price-converter?base_currency_id=".$_[1]."&quote_currency_id=".$_[0]."&amount=1";
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "\nHTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub apicmcpaid {
    my $baseurl = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?";
    my $ids = "id=";
    my $rel = "&convert=$_[0]";
    my $apikey = "&CMC_PRO_API_KEY=x";

    foreach my $coin ( keys %{$marginsconf} ) {
        my $cmcid = $marginsconf->{$coin}{'cmcid'};
        $ids .= $cmcid.",";
    }
    chop($ids);
    my $url = $baseurl.$ids.$rel.$apikey;
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "\nHTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub setprice {
    my $price = $_[2];
    my $bid = undef;
    my $ask = undef;
    my $command = undef;

    if ( defined $marginsconf->{$_[1]}{'askmargin'} ) {
        $ask = sprintf("%.8f", $price + $price * $marginsconf->{$_[1]}{'askmargin'});
    }
    if ( defined $marginsconf->{$_[1]}{'bidmargin'} ) {
        $bid = sprintf("%.8f", 1 / ($price - $price * $marginsconf->{$_[1]}{'bidmargin'}));
    }

    my $ua = LWP::UserAgent->new;
    my $req = HTTP::Request->new(
        POST => 'http://127.0.0.1:7783');
    $req->content_type('application/x-www-form-urlencoded');

    if ( defined $ask ) {
        $command = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$_[1].'","rel":"'.$_[0].'","price":'.$ask.'}';
        $req->content($command);
        my $resp = $ua->request($req);
        print "$_[1]/$_[0] $ask ".$resp->content."\n";
    }

    if ( defined $bid ) {
        $command = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$_[0].'","rel":"'.$_[1].'","price":'.$bid.'}';
        $req->content($command);
        $resp = $ua->request($req);
        print "$_[0]/$_[1] $bid ".$resp->content."\n";
    }
}


sub deleteprice {
    my $command = undef;
    my $ask = 0;
    my $bid = 0;

    my $ua = LWP::UserAgent->new;
    my $req = HTTP::Request->new(
        POST => 'http://127.0.0.1:7783');
    $req->content_type('application/x-www-form-urlencoded');

    $command = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$_[1].'","rel":"'.$_[0].'","price":'.$ask.'}';
    $req->content($command);
    my $resp = $ua->request($req);
    print "$_[1]/$_[0] $ask ".$resp->content."\n";

    $command = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$_[0].'","rel":"'.$_[1].'","price":'.$bid.'}';
    $req->content($command);
    $resp = $ua->request($req);
    print "$_[0]/$_[1] $bid ".$resp->content."\n";
}


if ( !defined $base || !defined $api ) {
    print "Please specifiy base coin and API: eg ./setprices KMD cmcpaid\n";
    exit 1;
}

my $gasprice = from_json(getgasprice())->{'standard'};

if ( $api eq "cmcpaid" ) {
    my $prices = apicmcpaid($base);
    if ( defined $prices ) {
        foreach my $coin ( keys %{$marginsconf} ) {
            my $cmcid = $marginsconf->{$coin}{'cmcid'};
            my $erc20 = $marginsconf->{$coin}{'erc20'};
            if ( !defined $erc20 ) { $erc20 = "0"; }
            my $price = from_json($prices)->{'data'}{$cmcid}{'quote'}{$base}{'price'};
            if ( $base ne $coin ) {
                if ( $erc20 eq "0" ) {
                    setprice($base,$coin,$price);
                } elsif ( ($erc20 eq "1") && ($gasprice < $maxgasprice) ) {
                    setprice($base,$coin,$price);
                } else {
                    deleteprice($base,$coin);
                } 
            }
        }
    }
} elsif ( $api eq "coinpaprika" ) {
    my $basepapid = $marginsconf->{$base}{'papid'};
    foreach my $coin ( keys %{$marginsconf} ) {
        my $papid = $marginsconf->{$coin}{'papid'};
        my $erc20 = $marginsconf->{$coin}{'erc20'};
        if ( !defined $erc20 ) { $erc20 = "0"; }
        my $coinprice = apipaprika($basepapid,$papid);
        my $price = from_json($coinprice)->{'price'};
        if ( $base ne $coin ) {
            if ( $erc20 eq "0" ) {
                setprice($base,$coin,$price);
            } elsif ( ($erc20 eq "1") && ($gasprice < $maxgasprice) ) {
                setprice($base,$coin,$price);
            } else {
                deleteprice($base,$coin);
            }
        }
        sleep 1;
    }
} else {
    print "API not found\n";
    exit 1;
}
