#!/usr/bin/perl

use warnings;
use LWP::UserAgent;
use JSON;
use File::Slurp qw(read_file);
use File::Basename;
use MIME::Base64;
use Digest::SHA qw(hmac_sha256_hex hmac_sha512_base64);
use Digest::MD5 qw(md5_hex);
#use Data::Dumper;


my $base = "KMD";
my $basepapid = "kmd-komodo";
my $binance_apikey = "";
my $binance_seckey = "";
my $crex24_apikey = "";
my $crex24_seckey = decode_base64("");
my $coinex_accessid = "";
my $coinex_seckey = "";
my $api = $ARGV[0];
my $cwd = dirname($0);


sub getgasprice {
    my $gaspriceurl = "https://www.etherchain.org/api/gasPriceOracle";
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $gaspriceurl);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $gaspriceurl, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub paprika_latest_price {
    my $url = "https://api.coinpaprika.com/v1/price-converter?base_currency_id=".$_[1]."&quote_currency_id=".$_[0]."&amount=1";
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub binance_latest_price {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.binance.com/api/v3/ticker/price?symbol=".$base.$coin;
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub binance_book_price {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.binance.com/api/v3/ticker/bookTicker?symbol=".$base.$coin;
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub coinex_latest_price {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.coinex.com/v1/market/ticker?market=".$base.$coin;
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub binance_depth {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.binance.com/api/v1/depth?symbol=".$base.$coin."&limit=100";
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub binance_getorders {
    my $base = $_[0];
    my $coin = $_[1];

    my $command = "symbol=".$base.$coin."&timestamp=".time()*1000;
    my $signature = hmac_sha256_hex($command, $binance_seckey);
    my $url = "https://api.binance.com/api/v3/openOrders?".$command."&signature=".$signature;

    my $ua = LWP::UserAgent->new;
    my $req = HTTP::Request->new(GET => $url);
    $req->header('X-MBX-APIKEY' => $binance_apikey);
    my $resp = $ua->request($req);
    return $resp->content;
}


sub binance_cancelorders {
    my $base = $_[0];
    my $coin = $_[1];

    my $ua = LWP::UserAgent->new;
    $req = HTTP::Request->new(DELETE => 'https://api.binance.com/api/v3/order');
    $req->header('X-MBX-APIKEY' => $binance_apikey);

    my $orders = decode_json(binance_getorders($base,$coin));
    foreach my $order( @$orders ) {
        my $orderid = $order->{'clientOrderId'};
        $command = "symbol=".$base.$coin."&origClientOrderId=".$orderid."&timestamp=".time()*1000;
        $signature = hmac_sha256_hex($command, $binance_seckey);
        $body = $command."&signature=".$signature;
        $req->content($body);
        $resp = $ua->request($req);
        #print $resp->content."\n";
    }
}


sub coinex_cancelorders {
    my $base = $_[0];
    my $coin = $_[1];
    my $tonce = time()*1000;
    my $url = "https://api.coinex.com/v1/order/pending?";
    my $params = "access_id=".$coinex_accessid."&account_id=0&market=".$base.$coin."&tonce=".$tonce;
    my $authorization = uc(md5_hex($params."&secret_key=".$coinex_seckey));

    my $ua = LWP::UserAgent->new;
    $req = HTTP::Request->new(DELETE => $url.$params);
    $ua->agent("Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36");
    $req->header('authorization' => $authorization);
    $req->header('content-type' => 'application/json');
    $req->content();
    $resp = $ua->request($req);
    #print $resp->content;
}


sub crex24_cancelorders {
    my $base = $_[0];
    my $coin = $_[1];
    my $urlpath = "/v2/trading/cancelOrdersByInstrument";
    my $nonce = time();
    my $body = '{"instruments":["'.$base.'-'.$coin.'"]}';
    my $command = $urlpath . $nonce . $body;
    my $signature = hmac_sha512_base64($command,$crex24_seckey);
    while (length($signature) % 4) {
        $signature .= '=';
    }

    my $ua = LWP::UserAgent->new;
    $req = HTTP::Request->new(POST => 'https://api.crex24.com/v2/trading/cancelOrdersByInstrument');
    $req->header('X-CREX24-API-KEY' => $crex24_apikey,
                 'X-CREX24-API-NONCE' => $nonce,
                 'X-CREX24-API-SIGN' => $signature);

    $req->content($body);
    my $resp = $ua->request($req);
    #print $resp->content."\n";
    sleep(1);
}


sub binance_setprice {
    my $base = $_[0];
    my $coin = $_[1];
    my $bid = undef;
    my $ask = undef;
    if ( $coin eq "ETH" ) {
        $bid = sprintf("%.6f",$_[2]);
        $ask = sprintf("%.6f",$_[3]);
    } else {
        $bid = sprintf("%.7f",$_[2]);
        $ask = sprintf("%.7f",$_[3]);
    }
    my $quantity = sprintf("%u",$_[4]);

    my $ua = LWP::UserAgent->new;
    my $req = HTTP::Request->new(POST => 'https://api.binance.com/api/v3/order');
    $req->header('X-MBX-APIKEY' => $binance_apikey);

    print "$base/$coin size ".sprintf("%03d",$quantity);

    if ( defined $bid ) {
        my $command = "symbol=".$base.$coin."&side=BUY&type=LIMIT_MAKER&newOrderRespType=RESULT&quantity=".$quantity."&price=".$bid."&newClientOrderId=mybuyid".$quantity."&timestamp=".time()*1000;
        my $signature = hmac_sha256_hex($command, $binance_seckey);
        my $body = $command."&signature=".$signature;
        $req->content($body);
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " bid ".$bid;
        } else {
            print " bid 0.0000000";
            #print " ".$resp->content;
        }
    }

    if ( defined $ask ) {
	my $command = "symbol=".$base.$coin."&side=SELL&type=LIMIT_MAKER&newOrderRespType=RESULT&quantity=".$quantity."&price=".$ask."&newClientOrderId=mysellid".$quantity."&timestamp=".time()*1000;
	my $signature = hmac_sha256_hex($command, $binance_seckey);
        my $body = $command."&signature=".$signature;
        $req->content($body);
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " ask ".$ask."\n";
        } else {
            print " ask 0.0000000\n";
            #print " ".$resp->content."\n";
        }
    }
}


sub crex24_setprice {
    my $base = $_[0];
    my $coin = $_[1];
    my $bid = $_[2];
    my $ask = $_[3];
    my $quantity = sprintf("%u",$_[4]);
    my $urlpath = "/v2/trading/placeOrder";

    print "$base/$coin size ".sprintf("%03d",$quantity);

    if ( defined $bid ) {
        my $nonce = time();
        my $body = '{"instrument":"'.$base.'-'.$coin.'","side":"buy","volume":'.$quantity.',"price":'.$bid.'}';
        my $command = $urlpath . $nonce . $body;
        my $signature = hmac_sha512_base64($command,$crex24_seckey);
        while (length($signature) % 4) {
            $signature .= '=';
        }
        my $ua = LWP::UserAgent->new;
        $req = HTTP::Request->new(POST => 'https://api.crex24.com/v2/trading/placeOrder');
        $req->header('X-CREX24-API-KEY' => $crex24_apikey,
                     'X-CREX24-API-NONCE' => $nonce,
                     'X-CREX24-API-SIGN' => $signature);
        $req->content($body);
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " bid ".$bid;
        } else {
            print " bid 0.0000000";
            #print " ".$resp->content;
        }
        sleep(1);
    }

    if ( defined $ask ) {
        my $nonce = time();
        my $body = '{"instrument":"'.$base.'-'.$coin.'","side":"sell","volume":'.$quantity.',"price":'.$ask.'}';
        my $command = $urlpath . $nonce . $body;
        my $signature = hmac_sha512_base64($command,$crex24_seckey);
        while (length($signature) % 4) {
            $signature .= '=';
        }
        my $ua = LWP::UserAgent->new;
        $req = HTTP::Request->new(POST => 'https://api.crex24.com/v2/trading/placeOrder');
        $req->header('X-CREX24-API-KEY' => $crex24_apikey,
                     'X-CREX24-API-NONCE' => $nonce,
                     'X-CREX24-API-SIGN' => $signature);
        $req->content($body);
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " ask ".$ask."\n";
        } else {
            print " ask 0.0000000\n";
            #print " ".$resp->content."\n";
        }
        sleep(1);
    }
}


sub coinex_setprice {
    my $base = $_[0];
    my $coin = $_[1];
    my $bid = $_[2];
    my $ask = $_[3];
    my $quantity = sprintf("%u",$_[4]);
    my $url = "https://api.coinex.com/v1/order/limit";

    print "$base/$coin size ".sprintf("%03d",$quantity);

    if ( defined $bid ) {
        my $tonce = time()*1000;
        my $body = '{ "access_id":"'.$coinex_accessid.'","amount":"'.$quantity.'","price":"'.$bid.'","type":"buy","market":"'.$base.$coin.'","tonce":'.$tonce.' }';
        my $signtext = "access_id=".$coinex_accessid."&amount=".$quantity."&market=".$base.$coin."&price=".$bid."&tonce=".$tonce."&type=buy&secret_key=".$coinex_seckey;
        my $authorization = uc(md5_hex($signtext));

        my $ua = LWP::UserAgent->new;
        $req = HTTP::Request->new(POST => $url);
        $ua->agent("Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36");
        $req->header('authorization' => $authorization);
        $req->header('content-type' => 'application/json');
        $req->content($body);
        $resp = $ua->request($req);
        my $code = decode_json($resp->content)->{'code'};
        if ($code eq "0") {
            print " bid ".$bid;
        } else {
            print " bid 0.00000000";
            #print " ".$resp->content;
        }
    }

    if ( defined $ask ) {
        my $tonce = time()*1000;
        my $body = '{ "access_id":"'.$coinex_accessid.'","amount":"'.$quantity.'","price":"'.$ask.'","type":"sell","market":"'.$base.$coin.'","tonce":'.$tonce.' }';
        my $signtext = "access_id=".$coinex_accessid."&amount=".$quantity."&market=".$base.$coin."&price=".$ask."&tonce=".$tonce."&type=sell&secret_key=".$coinex_seckey;
        my $authorization = uc(md5_hex($signtext));

        my $ua = LWP::UserAgent->new;
        $req = HTTP::Request->new(POST => $url);
        $ua->agent("Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36");
        $req->header('authorization' => $authorization);
        $req->header('content-type' => 'application/json');
        $req->content($body);
        $resp = $ua->request($req);
        my $code = decode_json($resp->content)->{'code'};
        if ($code eq "0") {
            print " ask ".$ask."\n";
        } else {
            print " ask 0.00000000\n";
            #print " ".$resp->content."\n";
        }
    }
}


sub dex_setprice {
    my $price = $_[2];
    my $bid = undef;
    my $ask = undef;
    my $command = undef;

    if ( defined $marginsconf->{$_[1]}{'askmargin'} ) {
        $ask = sprintf("%.8f", $price + $price * $marginsconf->{$_[1]}{'askmargin'});
    }
    if ( defined $marginsconf->{$_[1]}{'bidmargin'} ) {
        $bid = sprintf("%.8f", 1 / ($price - $price * $marginsconf->{$_[1]}{'bidmargin'}));
    }

    my $ua = LWP::UserAgent->new;
    my $req = HTTP::Request->new(POST => 'http://127.0.0.1:7783');
    $req->content_type('application/x-www-form-urlencoded');

    if ( defined $ask ) {
	$command = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$_[1].'","rel":"'.$_[0].'","price":'.$ask.',"max":true}';
        $req->content($command);
        my $resp = $ua->request($req);
        my $uuid = from_json($resp->content)->{'result'}{'uuid'};
        if ( !defined $uuid ) { $uuid = "error"; }
        print "$_[1]/$_[0] ask ".sprintf("%.8f",$ask)." ";
    }

    if ( defined $bid ) {
	$command = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$_[0].'","rel":"'.$_[1].'","price":'.$bid.',"max":true}';
        $req->content($command);
        $resp = $ua->request($req);
        my $uuid = from_json($resp->content)->{'result'}{'uuid'};
        if ( !defined $uuid ) { $uuid = "error"; }
        print "bid ".sprintf("%.8f",1/$bid)."\n";
    }
}


sub dex_deleteprice {
    my $ua = LWP::UserAgent->new;
    my $req = HTTP::Request->new(POST => 'http://127.0.0.1:7783');
    $req->content_type('application/x-www-form-urlencoded');

    $command = '{"userpass":"'.$userpass.'","method":"cancel_all_orders","cancel_by":{"type":"Pair","data":{"base":"'.$_[1].'","rel":"'.$_[0].'"}}}';
    $req->content($command);
    my $resp = $ua->request($req);
    print "$_[0]/$_[1] ".$resp->content;

    $command = '{"userpass":"'.$userpass.'","method":"cancel_all_orders","cancel_by":{"type":"Pair","data":{"base":"'.$_[0].'","rel":"'.$_[1].'"}}}';
    $req->content($command);
    $resp = $ua->request($req);
    print " ".$resp->content."\n";
}


sub calc_bestbidprice {
    my $quantity = $_[1];
    my $coin = $_[2];
    foreach (@{$_[0]}) {
        my @array = $_;
        my $price = $array[0][0];
        my $volume = $array[0][1];
        if ( $volume > $quantity ) {
            if ( $coin eq "ETH" ) {
                return $price + 0.00000100;
            } else {
                return $price + 0.00000010;
            }
            last;
        }
    }
}


sub calc_bestaskprice {
    my $quantity = $_[1];
    my $coin = $_[2];
    foreach (@{$_[0]}) {
        my @array = $_;
        my $price = $array[0][0];
        my $volume = $array[0][1];
        if ( $volume > $quantity ) {
            if ( $coin eq "ETH" ) {
                return $price - 0.00000100;
            } else {
                return $price - 0.00000010;
            }
            last;
        }
    }
}


if ( $api eq "dex" ) {
    $userpass =  $ENV{'userpass'};
    my $maxgasprice = 15;
    my $gasprice = from_json(getgasprice())->{'standard'};
    my $json = read_file("$cwd/mpm.conf.dex");
    $marginsconf = decode_json($json);
    foreach my $coin ( keys %{$marginsconf} ) {
        my $price = undef;
        my $papid = $marginsconf->{$coin}{'papid'};
        my $erc20 = $marginsconf->{$coin}{'erc20'};
        if ( !defined $erc20 ) { $erc20 = "0"; }
        if ( ( $coin eq "BTC" ) || ( $coin eq "ETH" ) ) {
            my $cex_price = decode_json(binance_latest_price($base,$coin))->{'price'};
            $price = 1 / $cex_price;
        } else {
            my $coinprice = paprika_latest_price($basepapid,$papid);
            if ( $coinprice ne "1" ) { $price = from_json($coinprice)->{'price'}; }
        }
        if ( ($erc20 eq "0") && (defined $price) ) {
            dex_setprice($base,$coin,$price);
        } elsif ( ($erc20 eq "1") && ($gasprice < $maxgasprice) && (defined $price) ) {
            dex_setprice($base,$coin,$price);
        } else {
            dex_deleteprice($base,$coin);
        }
    }
} elsif ( $api eq "binance" ) {
    my $json = read_file("$cwd/mpm.conf.binance");
    my $marginsconf = decode_json($json);
    my $bidmargin = $marginsconf->{$base}{'bidmargin'};
    my $askmargin = $marginsconf->{$base}{'askmargin'};
    my $bidminmargin = $marginsconf->{$base}{'bidminmargin'};
    my $askminmargin = $marginsconf->{$base}{'askminmargin'};
    my $quantity = $marginsconf->{$base}{'quantity'};
    foreach my $coin ( "BTC", "ETH" ) {
        binance_cancelorders($base,$coin);
        my $binance_book_price = decode_json(binance_book_price($base,$coin));
        my $cex_price = sprintf("%.8f", ($binance_book_price->{'bidPrice'} + $binance_book_price->{'askPrice'})/2);
        #my $cex_price = decode_json(binance_latest_price($base,$coin))->{'price'};
        my $maxbidprice = sprintf("%.8f", ($cex_price - $cex_price * $bidminmargin));
        my $minaskprice = sprintf("%.8f", ($cex_price + $cex_price * $askminmargin));
        my $binance_depth = decode_json(binance_depth($base,$coin));

        $cex_bid_price_full = calc_bestbidprice($binance_depth->{'bids'},$quantity*2,$coin);
        $cex_ask_price_full = calc_bestaskprice($binance_depth->{'asks'},$quantity*2,$coin);
        if ( ( $cex_bid_price_full eq "" ) || ( $cex_bid_price_full > $maxbidprice ) ) { $cex_bid_price_full = sprintf("%.8f", ($cex_price - $cex_price * $bidmargin)); }
        if ( ( $cex_ask_price_full eq "" ) || ( $cex_ask_price_full < $minaskprice ) ) { $cex_ask_price_full = sprintf("%.8f", ($cex_price + $cex_price * $askmargin)); }
        binance_setprice($base,$coin,$cex_bid_price_full,$cex_ask_price_full,$quantity);

        $cex_bid_price_half = calc_bestbidprice($binance_depth->{'bids'},$quantity/2*1.5,$coin);
        $cex_ask_price_half = calc_bestaskprice($binance_depth->{'asks'},$quantity/2*1.5,$coin);
        if ( ( $cex_bid_price_half eq "" ) || ( $cex_bid_price_half > $maxbidprice ) ) { $cex_bid_price_half = sprintf("%.8f", ($cex_price - $cex_price * $bidmargin)); }
        if ( ( $cex_ask_price_half eq "" ) || ( $cex_ask_price_half < $minaskprice ) ) { $cex_ask_price_half = sprintf("%.8f", ($cex_price + $cex_price * $askmargin)); }
        if ( $cex_ask_price_half > $cex_ask_price_full ) { $cex_ask_price_half = $cex_ask_price_full; }
        if ( $cex_bid_price_half < $cex_bid_price_full ) { $cex_bid_price_half = $cex_bid_price_full; }
        binance_setprice($base,$coin,$cex_bid_price_half,$cex_ask_price_half,$quantity/2);

        $cex_bid_price_quarter = calc_bestbidprice($binance_depth->{'bids'},$quantity/6*1.25,$coin);
        $cex_ask_price_quarter = calc_bestaskprice($binance_depth->{'asks'},$quantity/6*1.25,$coin);
        if ( ( $cex_bid_price_quarter eq "" ) || ( $cex_bid_price_quarter > $maxbidprice ) ) { $cex_bid_price_quarter = sprintf("%.8f", ($cex_price - $cex_price * $bidminmargin)); }
        if ( ( $cex_ask_price_quarter eq "" ) || ( $cex_ask_price_quarter < $minaskprice ) ) { $cex_ask_price_quarter = sprintf("%.8f", ($cex_price + $cex_price * $askminmargin)); }
        if ( $cex_ask_price_quarter > $cex_ask_price_half ) { $cex_ask_price_quarter = $cex_ask_price_half; }
        if ( $cex_bid_price_quarter < $cex_bid_price_half ) { $cex_bid_price_quarter = $cex_bid_price_half; }
        binance_setprice($base,$coin,$cex_bid_price_quarter,$cex_ask_price_quarter,$quantity/6);
    }
} elsif ( $api eq "crex24" ) {
    my $json = read_file("$cwd/mpm.conf.crex24");
    my $marginsconf = decode_json($json);
    my $bidmargin = $marginsconf->{$base}{'bidmargin'};
    my $askmargin = $marginsconf->{$base}{'askmargin'};
    my $quantity = $marginsconf->{$base}{'quantity'};
    foreach my $coin ( "BTC" ) {
        crex24_cancelorders($base,$coin);
        my $binance_book_price = decode_json(binance_book_price($base,$coin));
        my $cex_price = sprintf("%.8f", ($binance_book_price->{'bidPrice'} + $binance_book_price->{'askPrice'})/2);
        #my $cex_price = decode_json(binance_latest_price($base,$coin))->{'price'};

        my $cex_bid_price = sprintf("%.7f", ($cex_price - $cex_price * $bidmargin));
        my $cex_ask_price = sprintf("%.7f", ($cex_price + $cex_price * $askmargin));
        crex24_setprice($base,$coin,$cex_bid_price,$cex_ask_price,$quantity);

        my $cex_bid_price_2 = sprintf("%.7f", ($cex_price - $cex_price * $bidmargin * 2));
        my $cex_ask_price_2 = sprintf("%.7f", ($cex_price + $cex_price * $askmargin * 2));
        crex24_setprice($base,$coin,$cex_bid_price_2,$cex_ask_price_2,$quantity*2);
    }
} elsif ( $api eq "coinex" ) {
    my $json = read_file("$cwd/mpm.conf.coinex");
    my $marginsconf = decode_json($json);
    my $bidmargin = $marginsconf->{$base}{'bidmargin'};
    my $askmargin = $marginsconf->{$base}{'askmargin'};
    my $quantity = $marginsconf->{$base}{'quantity'};
    my $binance_book_price = decode_json(binance_book_price("KMD","BTC"));
    my $binance_latest_price = sprintf("%.8f", ($binance_book_price->{'bidPrice'} + $binance_book_price->{'askPrice'})/2);
    #my $binance_latest_price = decode_json(binance_latest_price("KMD","BTC"))->{'price'};
    my $coinex_latest_price = decode_json(coinex_latest_price("KMD","BTC"))->{'data'}{'ticker'}{'last'};
    my $diff = sprintf("%.2f", (($binance_latest_price/$coinex_latest_price-1)*100));
    if ( $diff > 1 ) {
        $bidmargin = sprintf("%.4f",$bidmargin/$diff);
        $askmargin = sprintf("%.4f",$askmargin*$diff);
    } elsif ( $diff < -1 ) {
        $bidmargin = sprintf("%.4f",$bidmargin*abs($diff));
        $askmargin = sprintf("%.4f",$askmargin/abs($diff));
    }
    print "Binance: ".$binance_latest_price.", CoinEx: ".$coinex_latest_price.", diff: ".$diff."%, bidmargin: ".$bidmargin.", askmargin: ".$askmargin."\n";
    foreach my $coin ( "BTC", "BCH" ) {
        coinex_cancelorders($base,$coin);
        my $cex_price = decode_json(coinex_latest_price($base,$coin))->{'data'}{'ticker'}{'last'};

        my $cex_bid_price = sprintf("%.8f", ($cex_price - $cex_price * $bidmargin));
        my $cex_ask_price = sprintf("%.8f", ($cex_price + $cex_price * $askmargin));
        coinex_setprice($base,$coin,$cex_bid_price,$cex_ask_price,$quantity);

        my $cex_bid_price_2 = sprintf("%.8f", ($cex_price - $cex_price * $bidmargin * 2));
        my $cex_ask_price_2 = sprintf("%.8f", ($cex_price + $cex_price * $askmargin * 2));
        coinex_setprice($base,$coin,$cex_bid_price_2,$cex_ask_price_2,$quantity*2);
    }
} else {
    print "API not found\n";
}

