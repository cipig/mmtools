#!/usr/bin/perl

use warnings;
use LWP::UserAgent;
use LWP::Protocol::socks;
use JSON;
use JSON::RPC::Legacy::Client;
use File::Slurp qw(read_file);
use File::Basename;
use List::Util qw[min max];
use MIME::Base64;
use Digest::SHA qw(hmac_sha256_hex hmac_sha512_base64);
use Digest::MD5 qw(md5_hex);
use DateTime;
use DateTime::Format::Strptime;
use Time::HiRes;
use Data::Dumper;

my $api = $ARGV[0];
my $base = $ARGV[1];
my $basepapid = $ARGV[2];
my $basegeckoid = $ARGV[2];
my $pubkey = $ARGV[3];
my $recvaddr = $ARGV[4];
my $recvZaddr = $ARGV[5];
my $cwd = dirname($0);
my $useragent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36";
my $timeout = 30;

my $binance_apikey = "";
my $binance_seckey = "";
my $crex24_apikey = "";
my $crex24_seckey = decode_base64("");
my $coinex_accessid = "";
my $coinex_seckey = "";
my $vcc_apikey = "";
my $vcc_seckey = "";
my $bitvavo_apikey = "";
my $bitvavo_seckey = "";


sub paprika_latest_price {
    my $url = "https://api.coinpaprika.com/v1/price-converter?base_currency_id=".$_[1]."&quote_currency_id=".$_[0]."&amount=1";
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub gecko_latest_price {
    my $url = "https://api.coingecko.com/api/v3/simple/price?ids=".$_[0]."&vs_currencies=btc,usd&include_24hr_change=true";
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    #$ua->proxy([qw(http https)] => 'socks://127.0.0.1:9050');
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub dex_ticker_24h {
    my $url = "https://dexapi.cipig.net/public/ticker_24h.php?market=".$_[0]."-".$_[1];
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub paprika_price {
    my $base = $_[0];
    my $rel = $_[1];
    my $amount = $_[2];
    my $url = "https://api.coinpaprika.com/v1/price-converter?base_currency_id=".$base."&quote_currency_id=".$rel."&amount=".$amount;
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub binance_latest_price_old {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.binance.com/api/v3/ticker/price?symbol=".$base.$coin;
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1
        }
}


sub binance_latest_price {
    my $symbol = $_[0];
    my $url = "https://api.binance.com/api/v3/ticker/price?symbol=".$symbol;
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 0
        }
}


sub binance_book_price {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.binance.com/api/v3/ticker/bookTicker?symbol=".$base.$coin;
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub bitvavo_book_price {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.bitvavo.com/v2/ticker/book?market=".$base."-".$coin;
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub binance_kline {
    my $base = $_[0];
    my $coin = $_[1];
    my $interval = $_[2];
    my $limit = $_[3];
    my $url = "https://api.binance.com/api/v3/klines?symbol=".$base.$coin."&interval=".$interval."&limit=".$limit;
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub coinex_latest_price {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.coinex.com/v1/market/ticker?market=".$base.$coin;
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub binance_depth {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.binance.com/api/v3/depth?symbol=".$base.$coin."&limit=100";
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub bitvavo_depth {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.bitvavo.com/v2/".$base."-".$coin."/book";
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub crex24_depth {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.crex24.com/v2/public/orderBook?instrument=".$base."-".$coin;
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub vcc_depth {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://vcc.exchange/api/v2/orderbook/".$base."_".$coin."?depth=20";
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return decode_json($resp->content)->{'data'};
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub coinex_depth {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.coinex.com/v1/market/depth?market=".$base.$coin."&limit=10&merge=0";
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return decode_json($resp->content)->{'data'};
        } else {
            print "HTTP GET url: ", $url, "\n";
            #print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
            return 1;
        }
}


sub binance_getorders {
    my $base = $_[0];
    my $coin = $_[1];

    my $command = "symbol=".$base.$coin."&timestamp=".time()*1000;
    my $signature = hmac_sha256_hex($command, $binance_seckey);
    my $url = "https://api.binance.com/api/v3/openOrders?".$command."&signature=".$signature;

    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('X-MBX-APIKEY' => $binance_apikey);
    my $resp = $ua->request($req);
    #print $resp->content."\n";
    return $resp->content;
}


sub binance_cancelorders {
    my $base = $_[0];
    my $coin = $_[1];

    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    $req = HTTP::Request->new(DELETE => 'https://api.binance.com/api/v3/order');
    $req->header('X-MBX-APIKEY' => $binance_apikey);

    my $orders = decode_json(binance_getorders($base,$coin));
    if ($orders) {
        foreach my $order( @$orders ) {
            my $orderid = $order->{'clientOrderId'};
            $command = "symbol=".$base.$coin."&origClientOrderId=".$orderid."&timestamp=".time()*1000;
            $signature = hmac_sha256_hex($command, $binance_seckey);
            $body = $command."&signature=".$signature;
            $req->content($body);
            $resp = $ua->request($req);
            #print $resp->content."\n";
        }
    }
}


sub bitvavo_cancelorders {
    my $base = $_[0];
    my $coin = $_[1];

    my $timestamp = time()*1000;
    my $url = "https://api.bitvavo.com/v2/orders";
    my $params = "?market=".$base."-".$coin;
    my $command = $timestamp."DELETE/v2/orders".$params;
    my $signature = hmac_sha256_hex($command, $bitvavo_seckey);
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    $req = HTTP::Request->new(DELETE => $url.$params);
    $req->header('BITVAVO-ACCESS-KEY' => $bitvavo_apikey);
    $req->header('BITVAVO-ACCESS-SIGNATURE' => $signature);
    $req->header('BITVAVO-ACCESS-TIMESTAMP' => $timestamp);
    $req->header('content-type' => 'application/json');
    $req->content();
    $resp = $ua->request($req);
    #print $resp->content."\n";
}


sub coinex_cancelorders {
    my $base = $_[0];
    my $coin = $_[1];
    my $tonce = time()*1000;
    my $url = "https://api.coinex.com/v1/order/pending?";
    my $params = "access_id=".$coinex_accessid."&account_id=0&market=".$base.$coin."&tonce=".$tonce;
    my $authorization = uc(md5_hex($params."&secret_key=".$coinex_seckey));

    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    $req = HTTP::Request->new(DELETE => $url.$params);
    $req->header('authorization' => $authorization);
    $req->header('content-type' => 'application/json');
    $req->content();
    $resp = $ua->request($req);
    #print $resp->content;
}


sub vcc_getorders {
    my $base = lc($_[1]);
    my $coin = lc($_[0]);
    my $tonce = time()*1000;
    my $url = "https://vcc.exchange/api/v2/orders/open";
    my $params = '?currency='.$base.'&coin='.$coin;
    my $payload = "GET api/v2/orders/open".$params;
    my $signature = hmac_sha256_hex($payload, $vcc_seckey);

    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    $req = HTTP::Request->new(GET => $url.$params);
    $req->header('Authorization' => 'Bearer '.$vcc_apikey);
    $req->header('timestamp' => $tonce);
    $req->header('signature' => $signature);
    $req->content();
    $resp = $ua->request($req);
    return $resp->content;
}


sub vcc_cancelorder {
    my $order_id = $_[0];
    my $tonce = time()*1000;
    my $url = "https://vcc.exchange/api/v2/orders/".$order_id."/cancel";
    my $payload = "PUT api/v2/orders/".$order_id."/cancel";
    my $signature = hmac_sha256_hex($payload, $vcc_seckey);

    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    $req = HTTP::Request->new(PUT => $url);
    $req->header('Authorization' => 'Bearer '.$vcc_apikey);
    $req->header('timestamp' => $tonce);
    $req->header('signature' => $signature);
    $req->content();
    $resp = $ua->request($req);
    #print $resp->content;
}


sub vcc_cancelorders {
    my $base = lc($_[1]);
    my $coin = lc($_[0]);
    my $orders = decode_json(vcc_getorders($coin,$base));
    for my $order( @{$orders->{data}{data}} ){
        vcc_cancelorder($order->{id});
    }
}


sub vcc_cancelallorders {
    my $tonce = time()*1000;
    my $url = "https://vcc.exchange/api/v2/orders/cancel-all";
    my $payload = "PUT api/v2/orders/cancel-all";
    my $signature = hmac_sha256_hex($payload, $vcc_seckey);

    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    $req = HTTP::Request->new(PUT => $url);
    $req->header('Authorization' => 'Bearer '.$vcc_apikey);
    $req->header('timestamp' => $tonce);
    $req->header('signature' => $signature);
    $req->content();
    $resp = $ua->request($req);
    #print $resp->content;
}


sub crex24_cancelorders {
    my $base = $_[0];
    my $coin = $_[1];
    my $urlpath = "/v2/trading/cancelOrdersByInstrument";
    my $nonce = $_[2];
    my $body = '{"instruments":["'.$base.'-'.$coin.'"]}';
    my $command = $urlpath . $nonce . $body;
    my $signature = hmac_sha512_base64($command,$crex24_seckey);
    while (length($signature) % 4) {
        $signature .= '=';
    }

    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    $req = HTTP::Request->new(POST => 'https://api.crex24.com/v2/trading/cancelOrdersByInstrument');
    $req->header('X-CREX24-API-KEY' => $crex24_apikey,
                 'X-CREX24-API-NONCE' => $nonce,
                 'X-CREX24-API-SIGN' => $signature);

    $req->content($body);
    my $resp = $ua->request($req);
    #print $resp->content."\n";
}


sub binance_setprice {
    my $base = $_[0];
    my $coin = $_[1];
    my $bid = undef;
    my $ask = undef;
    if (( $coin eq "BUSD" ) || ( $coin eq "USDT" )) {
        $bid = sprintf("%.4f",$_[2]);
        $ask = sprintf("%.4f",$_[3]);
    } elsif ( $coin eq "ETH" ) {
        $bid = sprintf("%.6f",$_[2]);
        $ask = sprintf("%.6f",$_[3]);
    } else {
        $bid = sprintf("%.8f",$_[2]);
        $ask = sprintf("%.8f",$_[3]);
    }
    my $quantity = sprintf("%u",$_[4]);

    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(POST => 'https://api.binance.com/api/v3/order');
    $req->header('X-MBX-APIKEY' => $binance_apikey);

    print "$base/$coin size ".sprintf("%04d",$quantity);

    if ( defined $bid ) {
        my $command = "symbol=".$base.$coin."&side=BUY&type=LIMIT_MAKER&newOrderRespType=RESULT&quantity=".$quantity."&price=".$bid."&newClientOrderId=buy".$coin.$base.$quantity."&recvWindow=15000&timestamp=".time()*1000;
        my $signature = hmac_sha256_hex($command, $binance_seckey);
        my $body = $command."&signature=".$signature;
        $req->content($body);
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " bid ".$bid;
        } else {
            print " bid ".$resp->content;
        }
    }

    if ( defined $ask ) {
	my $command = "symbol=".$base.$coin."&side=SELL&type=LIMIT_MAKER&newOrderRespType=RESULT&quantity=".$quantity."&price=".$ask."&newClientOrderId=sell".$coin.$base.$quantity."&recvWindow=15000&timestamp=".time()*1000;
	my $signature = hmac_sha256_hex($command, $binance_seckey);
        my $body = $command."&signature=".$signature;
        $req->content($body);
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " ask ".$ask."\n";
        } else {
            print " ask ".$resp->content."\n";
        }
    }
}


sub bitvavo_setprice {
    my $base = $_[0];
    my $coin = $_[1];
    my $bid = undef;
    my $ask = undef;
    if ( $coin eq "EUR" ) {
        $bid = sprintf("%.4f",$_[2]);
        $ask = sprintf("%.4f",$_[3]);
    } else {
        $bid = sprintf("%.8f",$_[2]);
        $ask = sprintf("%.8f",$_[3]);
    }
    my $quantity = sprintf("%u",$_[4]);

    my $timestamp = time()*1000;
    my $url = "https://api.bitvavo.com/v2/order";
    my $ua = LWP::UserAgent->new;
    $ua->agent($useragent);
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(POST => $url);

    print "$base/$coin size ".sprintf("%04d",$quantity);

    if ( defined $bid ) {
        my $body = '{"market":"'.$base.'-'.$coin.'","side":"buy","price":"'.$bid.'","amount":"'.$quantity.'","orderType":"limit","postOnly":true,"responseRequired":false}';
        my $command = $timestamp."POST/v2/order".$body;
        my $signature = hmac_sha256_hex($command, $bitvavo_seckey);
        $req->header('BITVAVO-ACCESS-KEY' => $bitvavo_apikey);
        $req->header('BITVAVO-ACCESS-SIGNATURE' => $signature);
        $req->header('BITVAVO-ACCESS-TIMESTAMP' => $timestamp);
        $req->header('content-type' => 'application/json');
        $req->content($body);
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " bid ".$bid;
        } else {
            print " bid 0.00000";
            print " ".$resp->content;
        }
    }

    if ( defined $ask ) {
        my $body = '{"market":"'.$base.'-'.$coin.'","side":"sell","price":"'.$ask.'","amount":"'.$quantity.'","orderType":"limit","postOnly":true,"responseRequired":false}';
        my $command = $timestamp."POST/v2/order".$body;
        my $signature = hmac_sha256_hex($command, $bitvavo_seckey);
        $req->header('BITVAVO-ACCESS-KEY' => $bitvavo_apikey);
        $req->header('BITVAVO-ACCESS-SIGNATURE' => $signature);
        $req->header('BITVAVO-ACCESS-TIMESTAMP' => $timestamp);
        $req->header('content-type' => 'application/json');
        $req->content($body);
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " ask ".$ask."\n";
        } else {
            print " ask 0.00000\n";
            print " ".$resp->content."\n";
        }
    }
}


sub crex24_setprice {
    my $base = $_[0];
    my $coin = $_[1];
    my $bid = $_[2];
    my $ask = $_[3];
    my $quantity = sprintf("%u",$_[4]);
    my $nonce = $_[5];
    my $urlpath = "/v2/trading/placeOrder";

    print "$base/$coin size ".sprintf("%03d",$quantity);

    if ( defined $bid ) {
        my $body = '{"instrument":"'.$base.'-'.$coin.'","side":"buy","volume":'.$quantity.',"price":'.$bid.'}';
        my $command = $urlpath . $nonce . $body;
        my $signature = hmac_sha512_base64($command,$crex24_seckey);
        while (length($signature) % 4) {
            $signature .= '=';
        }
        my $ua = LWP::UserAgent->new;
        $ua->agent($useragent);
        $ua->timeout($timeout);
        $req = HTTP::Request->new(POST => 'https://api.crex24.com/v2/trading/placeOrder');
        $req->header('X-CREX24-API-KEY' => $crex24_apikey,
                     'X-CREX24-API-NONCE' => $nonce,
                     'X-CREX24-API-SIGN' => $signature);
        $req->content($body);
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " bid ".$bid;
        } else {
            print " bid 0.0000000";
            print " ".$resp->content;
        }
    }

    if ( defined $ask ) {
        $nonce = $nonce+1;
        my $body = '{"instrument":"'.$base.'-'.$coin.'","side":"sell","volume":'.$quantity.',"price":'.$ask.'}';
        my $command = $urlpath . $nonce . $body;
        my $signature = hmac_sha512_base64($command,$crex24_seckey);
        while (length($signature) % 4) {
            $signature .= '=';
        }
        my $ua = LWP::UserAgent->new;
        $ua->agent($useragent);
        $ua->timeout($timeout);
        $req = HTTP::Request->new(POST => 'https://api.crex24.com/v2/trading/placeOrder');
        $req->header('X-CREX24-API-KEY' => $crex24_apikey,
                     'X-CREX24-API-NONCE' => $nonce,
                     'X-CREX24-API-SIGN' => $signature);
        $req->content($body);
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " ask ".$ask."\n";
        } else {
            print " ask 0.0000000\n";
            print " ".$resp->content."\n";
        }
    }
}


sub vcc_setprice {
    my $base = lc($_[1]);
    my $coin = lc($_[0]);
    my $bid = $_[2];
    my $ask = $_[3];
    my $quantity = sprintf("%u",$_[4]);
    my $url = "https://vcc.exchange/api/v2/orders";

    print "$_[0]/$_[1] size ".sprintf("%03d",$quantity);

    if ( defined $bid ) {
        my $tonce = time()*1000;
        my $params = '?currency='.$base.'&coin='.$coin.'&trade_type=buy&type=limit&quantity='.$quantity.'&price='.$bid;
        my $payload = "POST api/v2/orders".$params;
        my $signature = hmac_sha256_hex($payload, $vcc_seckey);
        my $ua = LWP::UserAgent->new;
        $ua->agent($useragent);
        $ua->timeout($timeout);
        $req = HTTP::Request->new(POST => $url.$params);
        $req->header('Authorization' => 'Bearer '.$vcc_apikey);
        $req->header('timestamp' => $tonce);
        $req->header('signature' => $signature);
        $req->header('content-type' => 'application/json');
        $req->content();
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " bid ".$bid;
        } else {
            print " bid 0.00000000";
            #print " ".$resp->content;
        }
    }

    if ( defined $ask ) {
        my $tonce = time()*1000;
        my $params = '?currency='.$base.'&coin='.$coin.'&trade_type=sell&type=limit&quantity='.$quantity.'&price='.$ask;
        my $payload = "POST api/v2/orders".$params;
        my $signature = hmac_sha256_hex($payload, $vcc_seckey);
        my $ua = LWP::UserAgent->new;
        $ua->agent($useragent);
        $ua->timeout($timeout);
        $req = HTTP::Request->new(POST => $url.$params);
        $req->header('Authorization' => 'Bearer '.$vcc_apikey);
        $req->header('timestamp' => $tonce);
        $req->header('signature' => $signature);
        $req->header('content-type' => 'application/json');
        $req->content();
        my $resp = $ua->request($req);
        if ($resp->is_success) {
            print " ask ".$ask."\n";
        } else {
            print " ask 0.00000000\n";
            #print " ".$resp->content."\n";
        }
    }
}


sub coinex_setprice {
    my $base = $_[0];
    my $coin = $_[1];
    my $bid = undef;
    my $ask = undef;
    if ( $coin eq "USDT" ) {
        $bid = sprintf("%.4f",$_[2]);
        $ask = sprintf("%.4f",$_[3]);
    } else {
        $bid = sprintf("%.8f",$_[2]);
        $ask = sprintf("%.8f",$_[3]);
    }
    my $quantity = sprintf("%u",$_[4]);
    my $url = "https://api.coinex.com/v1/order/limit";

    print "$base/$coin size ".sprintf("%03d",$quantity);

    if ( defined $bid ) {
        my $tonce = time()*1000;
        my $body = '{ "access_id":"'.$coinex_accessid.'","amount":"'.$quantity.'","price":"'.$bid.'","type":"buy","market":"'.$base.$coin.'","tonce":'.$tonce.' }';
        my $signtext = "access_id=".$coinex_accessid."&amount=".$quantity."&market=".$base.$coin."&price=".$bid."&tonce=".$tonce."&type=buy&secret_key=".$coinex_seckey;
        my $authorization = uc(md5_hex($signtext));

        my $ua = LWP::UserAgent->new;
        $ua->agent($useragent);
        $ua->timeout($timeout);
        $req = HTTP::Request->new(POST => $url);
        $req->header('authorization' => $authorization);
        $req->header('content-type' => 'application/json');
        $req->content($body);
        $resp = $ua->request($req);
        my $code = decode_json($resp->content)->{'code'};
        if ($code eq "0") {
            print " bid ".$bid;
        } else {
            print " bid 0.00000000";
            print " ".$resp->content;
        }
    }

    if ( defined $ask ) {
        my $tonce = time()*1000;
        my $body = '{ "access_id":"'.$coinex_accessid.'","amount":"'.$quantity.'","price":"'.$ask.'","type":"sell","market":"'.$base.$coin.'","tonce":'.$tonce.' }';
        my $signtext = "access_id=".$coinex_accessid."&amount=".$quantity."&market=".$base.$coin."&price=".$ask."&tonce=".$tonce."&type=sell&secret_key=".$coinex_seckey;
        my $authorization = uc(md5_hex($signtext));

        my $ua = LWP::UserAgent->new;
        $ua->agent($useragent);
        $ua->timeout($timeout);
        $req = HTTP::Request->new(POST => $url);
        $req->header('authorization' => $authorization);
        $req->header('content-type' => 'application/json');
        $req->content($body);
        $resp = $ua->request($req);
        my $code = decode_json($resp->content)->{'code'};
        if ($code eq "0") {
            print " ask ".$ask."\n";
        } else {
            print " ask 0.00000000\n";
            print " ".$resp->content."\n";
        }
    }
}


sub dex_setprice {
    my $base = $_[0];
    my $rel = $_[1];
    my $bid1 = $_[2];
    my $ask1 = $_[3];
    my $bid2 = $_[4];
    my $ask2 = $_[5];
    my $maxbidvolume = $_[6];
    my $minbidvolume = $_[7];
    my $maxaskvolume = $_[8];
    my $minaskvolume = $_[9];

    my $ua = LWP::UserAgent->new;
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(POST => 'http://127.0.0.1:7783');
    $req->content_type('application/x-www-form-urlencoded');

    print "$rel/$base ";
    if ( defined $ask1 ) {
        my $command1 = undef;
        my $command2 = undef;
        my $askvolume1 = 0;
        my $askvolume2 = 0;
        if ( defined $maxaskvolume ) {
            $askvolume1 = $maxaskvolume/2;
            $askvolume2 = $maxaskvolume*0.85;
        } else {
            $askvolume2 = dex_getbalance($rel)*0.85;
            if ( $askvolume2 > 0 ) { $askvolume1 = $askvolume2/2; }
        }

        if ( $askvolume2 > 0 ) {
            if (defined $minaskvolume) {
                $command1 = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$rel.'","rel":"'.$base.'","price":'.$ask1.',"volume":'.$askvolume1.',"min_volume":'.$minaskvolume.'}';
                $command2 = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$rel.'","rel":"'.$base.'","price":'.$ask2.',"volume":'.$askvolume2.',"min_volume":'.$minaskvolume.',"cancel_previous":false}';
            } else {
                $command1 = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$rel.'","rel":"'.$base.'","price":'.$ask1.',"volume":'.$askvolume1.'}';
                $command2 = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$rel.'","rel":"'.$base.'","price":'.$ask2.',"volume":'.$askvolume2.',"cancel_previous":false}';
            }

            $req->content($command1);
            my $resp1 = $ua->request($req);
            my $askerror1 = from_json($resp1->content)->{'error'};
            if ( defined $askerror1 ) { print $askerror1." "; } else { print "ask1 ".sprintf("%.8f",$ask1)." "; }

            $req->content($command2);
            my $resp2 = $ua->request($req);
            my $askerror2 = from_json($resp2->content)->{'error'};
            if ( defined $askerror2 ) { print $askerror2." "; } else { print "ask2 ".sprintf("%.8f",$ask2)." "; }
        }
    }

    if ( defined $bid1 ) {
        my $command1 = undef;
        my $command2 = undef;
        my $bidvolume1 = 0;
        my $bidvolume2 = 0;
        if ( defined $maxbidvolume ) {
            $bidvolume1 = $maxbidvolume/2;
            $bidvolume2 = $maxbidvolume*0.85;
        } else {
            $bidvolume2 = dex_getbalance($base)*0.85;
            if ( $bidvolume2 > 0 ) { $bidvolume1 = $bidvolume2/2; }
        }

        if ( $bidvolume2 > 0 ) {
            if ( defined $minbidvolume ) {
                $command1 = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$base.'","rel":"'.$rel.'","price":'.$bid1.',"volume":'.$bidvolume1.',"min_volume":'.$minbidvolume.'}';
                $command2 = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$base.'","rel":"'.$rel.'","price":'.$bid2.',"volume":'.$bidvolume2.',"min_volume":'.$minbidvolume.',"cancel_previous":false}';
            } else {
                $command1 = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$base.'","rel":"'.$rel.'","price":'.$bid1.',"volume":'.$bidvolume1.'}';
                $command2 = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$base.'","rel":"'.$rel.'","price":'.$bid2.',"volume":'.$bidvolume2.',"cancel_previous":false}';
            }

            $req->content($command1);
            $resp1 = $ua->request($req);
            my $biderror1 = from_json($resp1->content)->{'error'};
            if ( defined $biderror1 ) { print $biderror1; } else { print "bid1 ".sprintf("%.8f",1/$bid1)." "; }

            $req->content($command2);
            $resp2 = $ua->request($req);
            my $biderror2 = from_json($resp2->content)->{'error'};
            if ( defined $biderror2 ) { print $biderror2; } else { print "bid2 ".sprintf("%.8f",1/$bid2); }
        }
    }
    print "\n";
}


sub dexp2p_setprice {
    my $base = $_[0];
    my $rel = $_[1];
    my $base_price = $_[2];
    my $rel_price = $_[3];
    my $base_balance = $_[4];
    my $rel_balance = $_[5];

    if ( defined $marginsconf->{$_[1]}{'askmargin'} ) {
        $ask = sprintf("%.8f", $base_price + $base_price * $marginsconf->{$_[1]}{'askmargin'});
    }
    if ( defined $marginsconf->{$_[1]}{'bidmargin'} ) {
        $bid = sprintf("%.8f", $rel_price + $rel_price * $marginsconf->{$_[1]}{'bidmargin'});
    }

    my $client = new JSON::RPC::Legacy::Client;
    $client->ua->credentials('localhost:10591', 'jsonrpc', 'dexp2p' => 'KeWt2phRPXUPGX');
    my $uri = 'http://localhost:10591/';

    print "$rel/$base ";
    if ( defined $ask ) {
        my $obj = { method => 'DEX_broadcast', params => ['hello','0',$rel,$base,$pubkey,''.$rel_balance,''.$ask] };
        my $res = $client->call( $uri, $obj );
        if ($res){
           if ($res->is_error) { print "Error : ", Dumper($res->error_message); }
           #else { print Dumper($res->result); }
           else { print "ask ".sprintf("%.8f",$ask/$rel_balance)." "; }
        } else {
           print $client->status_line;
        }
    }

    if ( defined $bid ) {
        my $obj = { method => 'DEX_broadcast', params => ['hello','0',$base,$rel,$pubkey,''.$base_balance,''.$bid] };
        my $res = $client->call( $uri, $obj );
        if ($res){
           if ($res->is_error) { print "Error : ", Dumper($res->error_message); }
           #else { print Dumper($res->result); }
           else { print "bid ".sprintf("%.8f",$base_balance/$bid); }
        } else {
           print $client->status_line;
        }
    }
    print "\n";
}


sub dexp2p_deleteprice {
    my $base = $_[0];
    my $rel = $_[1];

    my $client = new JSON::RPC::Legacy::Client;
    $client->ua->credentials('localhost:10591', 'jsonrpc', 'dexp2p' => 'KeWt2phRPXUPGX');
    my $uri = 'http://localhost:10591/';

    my $obj = { method => 'DEX_cancel', params => ['','',$base,$rel] };
    my $res = $client->call( $uri, $obj );
    if ($res){
       if ($res->is_error) { print "Error : ", Dumper($res->error_message); }
       #else { print Dumper($res->result); }
    } else {
       print $client->status_line;
    }

    $obj = { method => 'DEX_cancel', params => ['','',$rel,$base] };
    $res = $client->call( $uri, $obj );
    if ($res){
       if ($res->is_error) { print "Error : ", Dumper($res->error_message); }
       #else { print Dumper($res->result); }
    } else {
       print $client->status_line;
    }
}


sub dexp2p_getbalance {
    my $rpcport = $_[0];
    my $address = $_[1];

    my $client = new JSON::RPC::Legacy::Client;
    $client->ua->credentials('localhost:'.$rpcport, 'jsonrpc', 'dexp2p' => 'KeWt2phRPXUPGX');
    my $uri = 'http://localhost:'.$rpcport.'/';

    my $obj = { method => 'z_getbalance', params => [$address] };
    my $res = $client->call( $uri, $obj );
    if ($res){
       if ($res->is_error) { print "Error : ", Dumper($res->error_message); }
       else { return $res->result; }
    } else {
       print $client->status_line;
    }
}


sub dex_deleteprice {
    my $ua = LWP::UserAgent->new;
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(POST => 'http://127.0.0.1:7783');
    $req->content_type('application/x-www-form-urlencoded');

    $command = '{"userpass":"'.$userpass.'","method":"cancel_all_orders","cancel_by":{"type":"Pair","data":{"base":"'.$_[1].'","rel":"'.$_[0].'"}}}';
    $req->content($command);
    my $resp = $ua->request($req);
    print "$_[1]/$_[0] ".$resp->content;

    $command = '{"userpass":"'.$userpass.'","method":"cancel_all_orders","cancel_by":{"type":"Pair","data":{"base":"'.$_[0].'","rel":"'.$_[1].'"}}}';
    $req->content($command);
    $resp = $ua->request($req);
    print " ".$resp->content."\n";
}


sub dex_gettradefee {
    my $coin = $_[0];
    my $ua = LWP::UserAgent->new;
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(POST => 'http://127.0.0.1:7783');
    $req->content_type('application/x-www-form-urlencoded');

    $command = '{"userpass":"'.$userpass.'","method":"get_trade_fee","coin":"'.$coin.'"}';
    $req->content($command);
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return from_json($resp->content)->{'result'}{'amount'};
        } else {
            return 1;
        }
}


sub dex_getbalance {
    my $coin = $_[0];
    my $ua = LWP::UserAgent->new;
    $ua->timeout($timeout);
    my $req = HTTP::Request->new(POST => 'http://127.0.0.1:7783');
    $req->content_type('application/x-www-form-urlencoded');

    $command = '{"userpass":"'.$userpass.'","method":"my_balance","coin":"'.$coin.'"}';
    $req->content($command);
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return from_json($resp->content)->{'balance'};
        } else {
            return 0;
        }
}


sub calc_bestprice {
    my $quantity = $_[1];
    my $coin = $_[2];
    foreach (@{$_[0]}) {
        my @array = $_;
        my $price = $array[0][0];
        my $volume = $array[0][1];
        if ( $volume >= $quantity ) {
            return $price;
            last;
        }
    }
}


sub calc_bestprice_sum {
    my $sum = 0;
    my $maxsum = $_[1];
    my $coin = $_[2];
    foreach (@{$_[0]}) {
        my @array = $_;
        my $price = $array[0][0];
        my $volume = $array[0][1];
        $sum += $volume;
        if ( $sum >= $maxsum ) {
            return $price;
            last;
        }
    }
}


sub calc_bestprice_crex24 {
    my $quantity = $_[1];
    my $coin = $_[2];
    foreach (@{$_[0]}) {
        my @array = $_;
        my $price = $array[0]{"price"};
        my $volume = $array[0]{"volume"};
        if ( $volume >= $quantity ) {
            return sprintf("%.7f",$price);
            last;
        }
    }
}


sub calc_bestprice_crex24_sum {
    my $sum = 0;
    my $maxsum = $_[1];
    my $coin = $_[2];
    foreach (@{$_[0]}) {
        my @array = $_;
        my $price = $array[0]{"price"};
        my $volume = $array[0]{"volume"};
        $sum += $volume;
        if ( $sum >= $maxsum ) {
            return sprintf("%.7f",$price);
            last;
        }
    }
}


sub binance_volat {
    my $marginadd = 0.01;
    my $marginadd_1 = 0.01;
    my $marginadd_2 = 0.01;
    my $marginadd_3 = 0.01;

    my $kline_1 = binance_kline("KMD","BTC","15m","3");
    if ( $kline_1 ne "1" ) {
        # marginadd_1 is the oldest
        $marginadd_1 = from_json($kline_1)->[0][2] / from_json($kline_1)->[0][3] - 1;
        $marginadd_2 = from_json($kline_1)->[1][2] / from_json($kline_1)->[1][3] - 1;
        $marginadd_3 = from_json($kline_1)->[2][2] / from_json($kline_1)->[2][3] - 1;
    }
    $marginadd = ($marginadd_1 + $marginadd_2 + $marginadd_3)/3;

    print "volat: ".sprintf("%.3f", $marginadd_1)." ".sprintf("%.3f", $marginadd_2)." ".sprintf("%.3f", $marginadd_3)." / ".sprintf("%.3f", $marginadd)."\n";
    return $marginadd;
}


if ( $api eq "dex_gecko" ) {
    $userpass =  $ENV{'userpass'};
    my $json = read_file("$cwd/mpm.conf.dex.$base");
    $marginsconf = decode_json($json);

    my $ids = "ethereum,bitcoin,litecoin,bitcoin-cash,komodo,dogecoin";
    foreach my $coin ( keys %{$marginsconf} ) {
        $ids = $ids.",".$marginsconf->{$coin}{'geckoid'};
    }
    my $coinprice = gecko_latest_price($ids);

    my $factor = 1;
    my $binance_factor = 1;
    my $baseid = lc($base);
    if ( $baseid eq "kmd" ) {
        $baseid = "btc";
        $factor = from_json($coinprice)->{"komodo"}{"btc"};
        print "factor: $factor\n";
        $binance_factor = decode_json(binance_latest_price("KMDBTC"))->{'price'};
        print "binance_factor: $binance_factor\n";
    } elsif ( $baseid eq "ltc" ) {
        $baseid = "btc";
        $factor = from_json($coinprice)->{"litecoin"}{"btc"};
        print "factor: $factor\n";
        $binance_factor = decode_json(binance_latest_price("LTCBTC"))->{'price'};
        print "binance_factor: $binance_factor\n";
    } elsif ( $baseid eq "bch" ) {
        $baseid = "btc";
        $factor = from_json($coinprice)->{"bitcoin-cash"}{"btc"};
        print "factor: $factor\n";
        $binance_factor = decode_json(binance_latest_price("BCHBTC"))->{'price'};
        print "binance_factor: $binance_factor\n";
    } elsif ( ($baseid eq "doge") || ($baseid eq "doge-bep20") ) {
        $baseid = "btc";
        $factor = from_json($coinprice)->{"dogecoin"}{"btc"};
        print "factor: $factor\n";
        $binance_factor = decode_json(binance_latest_price("DOGEBTC"))->{'price'};
        print "binance_factor: $binance_factor\n";
    } elsif ( $baseid eq "btc-bep20" ) {
        $baseid = "btc";
    } elsif ( $baseid eq "eth-bep20" ) {
        $baseid = "btc";
        $factor = from_json($coinprice)->{"ethereum"}{"btc"};
        print "factor: $factor\n";
        $binance_factor = decode_json(binance_latest_price("ETHBTC"))->{'price'};
        print "binance_factor: $binance_factor\n";
    } elsif ( ($baseid eq "busd-bep20") || ($baseid eq "usdt-bep20") ) {
        $baseid = "usd";
    }

    if ( $coinprice ne "1" ) {
        my $erc20fee = dex_gettradefee("ETH");
        my $btcfee = dex_gettradefee("BTC");
        my $ethusdprice = from_json($coinprice)->{"ethereum"}{"usd"};
        my $btcusdprice = from_json($coinprice)->{"bitcoin"}{"usd"};
        my $dogeusdprice = from_json($coinprice)->{"dogecoin"}{"usd"};

        my $baseusdprice = 1;
        if ( $baseid ne "usd" ) {
            $baseusdprice = from_json($coinprice)->{$basegeckoid}{"usd"};
        }

        foreach my $coin ( keys %{$marginsconf} ) {
            my $geckoid = $marginsconf->{$coin}{'geckoid'};
            my $binance_symbol = $marginsconf->{$coin}{'binance_symbol'};
            my $type = $marginsconf->{$coin}{'type'};
            if ( !defined $type ) { $type = "utxo"; }

            my $price = from_json($coinprice)->{$geckoid}{$baseid} / $binance_factor;
            my $coinusdprice = from_json($coinprice)->{$geckoid}{"usd"};
            if ( defined $binance_symbol ) {
                my $binance_price = binance_latest_price($binance_symbol);
                if ( $binance_price ne "0" ) {
                    $binance_price = from_json($binance_price)->{"price"} / $binance_factor;
                    print "== price: $price  binance_price: $binance_price\n";
                    $price = $binance_price;
                }
            }

            my $key = $baseid."_24h_change";
            my $change = 0;
            if ( defined from_json($coinprice)->{$geckoid}{$key} ) {
                $change = abs(from_json($coinprice)->{$geckoid}{$key});
            }
            my $marginadd = undef;
            if ( (($base eq "KMD") && ($coin eq "KMD-BEP20")) || (($base eq "BTC-BEP20") && ($coin eq "BTC")) || (($base eq "ETH-BEP20") && ($coin eq "ETH")) || (($base eq "DOGE-BEP20") && ($coin eq "DOGE")) ) {
                $marginadd = 0;
            } elsif ( ($base eq "KMD") || ($coin eq "KMD") || ($coin eq "KMD-BEP20") ) {
                $marginadd = $change/100/4;
            } else {
                $marginadd = $change/100/3;
            }

            my $bid1 = undef;
            my $bid2 = undef;
            my $ask1 = undef;
            my $ask2 = undef;
            if ( defined $marginsconf->{$coin}{'askmargin'} ) {
                my $askmargin1 = $marginsconf->{$coin}{'askmargin'} + $marginadd;
                my $askmargin2 = $askmargin1 * 2;
                $ask1 = sprintf("%.8f", $price + $price * $askmargin1);
                $ask2 = sprintf("%.8f", $price + $price * $askmargin2);
            }
            if ( defined $marginsconf->{$coin}{'bidmargin'} ) {
                my $bidmargin1 = $marginsconf->{$coin}{'bidmargin'} + $marginadd;
                my $bidmargin2 = $bidmargin1 * 2;
                if ( $bidmargin1 > 0.94 ) { $bidmargin1 = 0.94; }
                if ( $bidmargin2 > 0.96 ) { $bidmargin2 = 0.96; }
                my $low = $price - $price * $bidmargin2;
                if ( $low < 0.00000001 ) { print "kaputt: $coin, price: $low\n"; }
                $bid1 = sprintf("%.8f", 1 / ($price - $price * $bidmargin1));
                $bid2 = sprintf("%.8f", 1 / ($price - $price * $bidmargin2));
            }

            my $maxbidvolume = $marginsconf->{$coin}{'maxbidvolume'};
            my $minbidvolume = $marginsconf->{$coin}{'minbidvolume'};
            my $maxaskvolume = $marginsconf->{$coin}{'maxaskvolume'};
            my $minaskvolume = $marginsconf->{$coin}{'minaskvolume'};
            my $minaskvolume_btc = undef;
            my $minbidvolume_btc = undef;
            my $minaskvolume_eth = undef;
            my $minbidvolume_eth = undef;
            if ( ($base eq "BTC") && ($type eq "erc20") ) {
                $minaskvolume_btc = sprintf("%.8f",$btcfee * $btcusdprice / $coinusdprice * 15);
                $minbidvolume_btc = sprintf("%.8f",$btcfee * 15);
                $minaskvolume_eth = sprintf("%.8f",$erc20fee * $ethusdprice / $coinusdprice * 30);
                $minbidvolume_eth = sprintf("%.8f",$erc20fee * $ethusdprice / $baseusdprice * 30);
                $minaskvolume = max($minaskvolume_btc,$minaskvolume_eth);
                $minbidvolume = max($minbidvolume_btc,$minbidvolume_eth);
                if ( $minaskvolume < 0.00777/$ask1 ) { $minaskvolume = 0.00777/$ask1*1.1; }
                if ( $minbidvolume < 0.00777 ) { $minbidvolume = 0.00777; }
            } elsif ( $base eq "BTC" ) {
                $minaskvolume_btc = sprintf("%.8f",$btcfee * $btcusdprice / $coinusdprice * 15);
                $minbidvolume_btc = sprintf("%.8f",$btcfee * 15);
                $minaskvolume = $minaskvolume_btc;
                $minbidvolume = $minbidvolume_btc;
                if ( $minaskvolume < 0.00777/$ask1 ) { $minaskvolume = 0.00777/$ask1*1.1; }
                if ( $minbidvolume < 0.00777 ) { $minbidvolume = 0.00777; }
            } elsif ( $type eq "erc20" ) {
                $minaskvolume_eth = sprintf("%.8f",$erc20fee * $ethusdprice / $coinusdprice * 30);
                $minbidvolume_eth = sprintf("%.8f",$erc20fee * $ethusdprice / $baseusdprice * 30);
                $minaskvolume = $minaskvolume_eth;
                $minbidvolume = $minbidvolume_eth;
            } elsif ( ($base eq "BUSD-BEP20") || ($base eq "USDT-BEP20") ) {
                $minbidvolume = 10;
            }

            if (!defined $price) {
                dex_deleteprice($base,$coin);
            } else {
                dex_setprice($base,$coin,$bid1,$ask1,$bid2,$ask2,$maxbidvolume,$minbidvolume,$maxaskvolume,$minaskvolume);
            }

            Time::HiRes::sleep(0.3);
        }
    }


} elsif ( $api eq "dex_paprika" ) {
    $userpass =  $ENV{'userpass'};
    my $json = read_file("$cwd/mpm.conf.dex.$base");
    $marginsconf = decode_json($json);
#    my $marginadd = binance_volat();
    my $marginadd = 0;
    foreach my $coin ( keys %{$marginsconf} ) {
        my $price = undef;
        my $diff_1 = 0;
        my $diff_2 = 0;
        my $papid = $marginsconf->{$coin}{'papid'};
        my $tradefee = dex_gettradefee($coin);
        my $maxfee = $marginsconf->{$coin}{'maxfee'};
        if ( !defined $maxfee ) { $maxfee = "100"; }

        my $coinprice = paprika_latest_price($basepapid,$papid);
#        my $weightedprice = from_json(dex_ticker_24h($coin,$base))->[0]{'weightedAvgPrice'};
        if ( $coinprice ne "1" ) {
            $price = from_json($coinprice)->{'price'};
            my $format = DateTime::Format::Strptime->new( pattern => '%FT%T%z');
            my $base_updated = from_json($coinprice)->{'base_price_last_updated'};
            my $basetime = $format->parse_datetime($base_updated);
            my $quote_updated = from_json($coinprice)->{'quote_price_last_updated'};
            my $quotetime = $format->parse_datetime($quote_updated);
            my $now = DateTime->now;
            $diff_1 = $now->epoch - $basetime->epoch;
            $diff_2 = $now->epoch - $quotetime->epoch;
            print "$diff_1 $diff_2 ";
        }

        if ( (!defined $price) || ($tradefee > $maxfee) ) {
            dex_deleteprice($base,$coin);
        } elsif ( ($diff_1 < 180) || ($diff_2 < 180) ) {
            dex_setprice($base,$coin,$price,$marginadd);
        }
    }

} elsif ( $api eq "dexp2p" ) {
    my $json = read_file("$cwd/mpm.conf.dexp2p");
    $marginsconf = decode_json($json);
#    my $baseamount = dexp2p_getbalance(7771,$recvaddr);
    my $baseamount = 10;
    foreach my $coin ( keys %{$marginsconf} ) {
        my $rpcport = $marginsconf->{$coin}{'rpcport'};
#        my $relamount = dexp2p_getbalance($rpcport,$recvaddr);
        my $relamount = $marginsconf->{$coin}{'amount'};
        my $papid = $marginsconf->{$coin}{'papid'};
        my $baseprice = from_json(paprika_price($papid,$basepapid,$relamount))->{'price'};
        my $relprice = from_json(paprika_price($basepapid,$papid,$baseamount))->{'price'};
        dexp2p_deleteprice($base,$coin);
        dexp2p_setprice($base,$coin,$baseprice,$relprice,$baseamount,$relamount);
    }

} elsif ( $api eq "binance" ) {
    my $json = read_file("$cwd/mpm.conf.binance");
    my $marginsconf = decode_json($json);
    #my $marginadd = binance_volat();
    my $marginadd = 0;

    foreach my $coin ( keys %{$marginsconf} ) {
        my $bidmargin_1 = sprintf("%.4f", $marginsconf->{$coin}{'bidmargin_1'} + $marginadd/50);
        my $bidmargin_2 = sprintf("%.4f", $marginsconf->{$coin}{'bidmargin_2'} + $marginadd/25);
        my $bidmargin_3 = sprintf("%.4f", $marginsconf->{$coin}{'bidmargin_3'} + $marginadd/10);
        my $askmargin_1 = sprintf("%.4f", $marginsconf->{$coin}{'askmargin_1'} + $marginadd/50);
        my $askmargin_2 = sprintf("%.4f", $marginsconf->{$coin}{'askmargin_2'} + $marginadd/25);
        my $askmargin_3 = sprintf("%.4f", $marginsconf->{$coin}{'askmargin_3'} + $marginadd/10);
        my $quantity_1 = $marginsconf->{$coin}{'quantity_1'};
        my $quantity_2 = $marginsconf->{$coin}{'quantity_2'};
        my $quantity_3 = $marginsconf->{$coin}{'quantity_3'};
        my $maxsum_1 = $marginsconf->{$coin}{'maxsum_1'};
        my $maxsum_2 = $marginsconf->{$coin}{'maxsum_2'};
        my $maxsum_3 = $marginsconf->{$coin}{'maxsum_3'};

        binance_cancelorders($base,$coin);

        my $binance_book_price = decode_json(binance_book_price($base,$coin));
        my $cex_price = sprintf("%.8f", ($binance_book_price->{'bidPrice'} + $binance_book_price->{'askPrice'})/2);
        my $binance_depth = decode_json(binance_depth($base,$coin));

        if ( ($binance_depth ne "1") && ($binance_book_price ne "1") ) {
            my $maxbidprice = sprintf("%.8f", ($cex_price - $cex_price * $bidmargin_1));
            my $minaskprice = sprintf("%.8f", ($cex_price + $cex_price * $askmargin_1));
            if (( $coin eq "BUSD" ) || ( $coin eq "USDT" )) {
                $cex_bid_price_1 = calc_bestprice_sum($binance_depth->{'bids'},$maxsum_1,$coin) + 0.00010000;
                $cex_ask_price_1 = calc_bestprice_sum($binance_depth->{'asks'},$maxsum_1,$coin) - 0.00010000;
            } elsif ( $coin eq "ETH" ) {
                $cex_bid_price_1 = calc_bestprice_sum($binance_depth->{'bids'},$maxsum_1,$coin) + 0.00000100;
                $cex_ask_price_1 = calc_bestprice_sum($binance_depth->{'asks'},$maxsum_1,$coin) - 0.00000100;
            } else {
                $cex_bid_price_1 = calc_bestprice_sum($binance_depth->{'bids'},$maxsum_1,$coin) + 0.00000001;
                $cex_ask_price_1 = calc_bestprice_sum($binance_depth->{'asks'},$maxsum_1,$coin) - 0.00000001;
            }
            if ( ( $cex_bid_price_1 eq "0.00000001" ) || ( $cex_bid_price_1 > $maxbidprice ) ) { $cex_bid_price_1 = $maxbidprice; }
            if ( ( $cex_ask_price_1 eq "0.00000001" ) || ( $cex_ask_price_1 < $minaskprice ) ) { $cex_ask_price_1 = $minaskprice; }

            $maxbidprice = sprintf("%.8f", ($cex_price - $cex_price * $bidmargin_2));
            $minaskprice = sprintf("%.8f", ($cex_price + $cex_price * $askmargin_2));
            if (( $coin eq "BUSD" ) || ( $coin eq "USDT" )) {
                $cex_bid_price_2 = calc_bestprice_sum($binance_depth->{'bids'},$maxsum_2,$coin) + 0.00010000;
                $cex_ask_price_2 = calc_bestprice_sum($binance_depth->{'asks'},$maxsum_2,$coin) - 0.00010000;
            } elsif ( $coin eq "ETH" ) {
                $cex_bid_price_2 = calc_bestprice_sum($binance_depth->{'bids'},$maxsum_2,$coin) + 0.00000100;
                $cex_ask_price_2 = calc_bestprice_sum($binance_depth->{'asks'},$maxsum_2,$coin) - 0.00000100;
            } else {
                $cex_bid_price_2 = calc_bestprice_sum($binance_depth->{'bids'},$maxsum_2,$coin) + 0.00000001;
                $cex_ask_price_2 = calc_bestprice_sum($binance_depth->{'asks'},$maxsum_2,$coin) - 0.00000001;
            }
            if ( ( $cex_bid_price_2 eq "0.00000001" ) || ( $cex_bid_price_2 > $maxbidprice ) ) { $cex_bid_price_2 = $maxbidprice; }
            if ( ( $cex_ask_price_2 eq "0.00000001" ) || ( $cex_ask_price_2 < $minaskprice ) ) { $cex_ask_price_2 = $minaskprice; }

            $maxbidprice = sprintf("%.8f", ($cex_price - $cex_price * $bidmargin_3));
            $minaskprice = sprintf("%.8f", ($cex_price + $cex_price * $askmargin_3));
            if (( $coin eq "BUSD" ) || ( $coin eq "USDT" )) {
                $cex_bid_price_3 = calc_bestprice_sum($binance_depth->{'bids'},$maxsum_3,$coin) + 0.00010000;
                $cex_ask_price_3 = calc_bestprice_sum($binance_depth->{'asks'},$maxsum_3,$coin) - 0.00010000;
            } elsif ( $coin eq "ETH" ) {
                $cex_bid_price_3 = calc_bestprice_sum($binance_depth->{'bids'},$maxsum_3,$coin) + 0.00000100;
                $cex_ask_price_3 = calc_bestprice_sum($binance_depth->{'asks'},$maxsum_3,$coin) - 0.00000100;
            } else {
                $cex_bid_price_3 = calc_bestprice_sum($binance_depth->{'bids'},$maxsum_3,$coin) + 0.00000001;
                $cex_ask_price_3 = calc_bestprice_sum($binance_depth->{'asks'},$maxsum_3,$coin) - 0.00000001;
            }
            if ( ( $cex_bid_price_3 eq "0.00000001" ) || ( $cex_bid_price_3 > $maxbidprice ) ) { $cex_bid_price_3 = $maxbidprice; }
            if ( ( $cex_ask_price_3 eq "0.00000001" ) || ( $cex_ask_price_3 < $minaskprice ) ) { $cex_ask_price_3 = $minaskprice; }

            #print "$cex_ask_price_1 $cex_ask_price_2 $cex_ask_price_3\n";
            binance_setprice($base,$coin,$cex_bid_price_1,$cex_ask_price_1,$quantity_1);
            binance_setprice($base,$coin,$cex_bid_price_2,$cex_ask_price_2,$quantity_2);
            binance_setprice($base,$coin,$cex_bid_price_3,$cex_ask_price_3,$quantity_3);
        }
    }

} elsif ( $api eq "crex24" ) {
    my $json = read_file("$cwd/mpm.conf.crex24");
    my $marginsconf = decode_json($json);
    my $marginadd = binance_volat();
    my $nonce = time();

    foreach my $coin ( keys %{$marginsconf} ) {
        my $bidmargin_1 = sprintf("%.4f", $marginsconf->{$coin}{'bidmargin_1'} + $marginadd/5);
        my $bidmargin_2 = sprintf("%.4f", $marginsconf->{$coin}{'bidmargin_2'} + $marginadd/15);
        my $askmargin_1 = sprintf("%.4f", $marginsconf->{$coin}{'askmargin_1'} + $marginadd/5);
        my $askmargin_2 = sprintf("%.4f", $marginsconf->{$coin}{'askmargin_2'} + $marginadd/15);
        my $quantity_1 = $marginsconf->{$coin}{'quantity_1'};
        my $quantity_2 = $marginsconf->{$coin}{'quantity_2'};
        my $maxsum_1 = $marginsconf->{$coin}{'maxsum_1'};
        my $maxsum_2 = $marginsconf->{$coin}{'maxsum_2'};

        $nonce = $nonce+1;
        crex24_cancelorders($base,$coin,$nonce);

        my $binance_book_price = decode_json(binance_book_price($base,$coin));
        my $cex_price = sprintf("%.8f", ($binance_book_price->{'bidPrice'} + $binance_book_price->{'askPrice'})/2);
        my $crex24_depth = decode_json(crex24_depth($base,$coin));

        if ( $crex24_depth ne "1" ) {
            my $maxbidprice = sprintf("%.7f", ($cex_price - $cex_price * $bidmargin_1));
            my $minaskprice = sprintf("%.7f", ($cex_price + $cex_price * $askmargin_1));
            $cex_bid_price_1 = sprintf("%.7f", (calc_bestprice_crex24_sum($crex24_depth->{'buyLevels'},$maxsum_1,$coin) + 0.0000001));
            $cex_ask_price_1 = sprintf("%.7f", (calc_bestprice_crex24_sum($crex24_depth->{'sellLevels'},$maxsum_1,$coin) - 0.0000001));
            if ( ( $cex_bid_price_1 eq "0.0000001" ) || ( $cex_bid_price_1 > $maxbidprice ) ) { $cex_bid_price_1 = $maxbidprice; }
            if ( ( $cex_ask_price_1 eq "0.0000001" ) || ( $cex_ask_price_1 < $minaskprice ) ) { $cex_ask_price_1 = $minaskprice; }

            $maxbidprice = sprintf("%.7f", ($cex_price - $cex_price * $bidmargin_2));
            $minaskprice = sprintf("%.7f", ($cex_price + $cex_price * $askmargin_2));
            $cex_bid_price_2 = sprintf("%.7f", (calc_bestprice_crex24_sum($crex24_depth->{'buyLevels'},$maxsum_2,$coin) + 0.0000001));
            $cex_ask_price_2 = sprintf("%.7f", (calc_bestprice_crex24_sum($crex24_depth->{'sellLevels'},$maxsum_2,$coin) - 0.0000001));
            if ( ( $cex_bid_price_2 eq "0.0000001" ) || ( $cex_bid_price_2 > $maxbidprice ) ) { $cex_bid_price_2 = $maxbidprice; }
            if ( ( $cex_ask_price_2 eq "0.0000001" ) || ( $cex_ask_price_2 < $minaskprice ) ) { $cex_ask_price_2 = $minaskprice; }

            $nonce = $nonce+1;
            crex24_setprice($base,$coin,$cex_bid_price_1,$cex_ask_price_1,$quantity_1,$nonce);
            $nonce = $nonce+2;
            crex24_setprice($base,$coin,$cex_bid_price_2,$cex_ask_price_2,$quantity_2,$nonce);
        }
    }

} elsif ( $api eq "bitvavo" ) {
    my $json = read_file("$cwd/mpm.conf.bitvavo");
    my $marginsconf = decode_json($json);
    my $marginadd = binance_volat();

    foreach my $coin ( keys %{$marginsconf} ) {
        my $bidmargin_1 = sprintf("%.4f", $marginsconf->{$coin}{'bidmargin_1'} + $marginadd/50);
        my $bidmargin_2 = sprintf("%.4f", $marginsconf->{$coin}{'bidmargin_2'} + $marginadd/25);
        my $bidmargin_3 = sprintf("%.4f", $marginsconf->{$coin}{'bidmargin_3'} + $marginadd/10);
        my $askmargin_1 = sprintf("%.4f", $marginsconf->{$coin}{'askmargin_1'} + $marginadd/50);
        my $askmargin_2 = sprintf("%.4f", $marginsconf->{$coin}{'askmargin_2'} + $marginadd/25);
        my $askmargin_3 = sprintf("%.4f", $marginsconf->{$coin}{'askmargin_3'} + $marginadd/10);
        my $quantity_1 = $marginsconf->{$coin}{'quantity_1'};
        my $quantity_2 = $marginsconf->{$coin}{'quantity_2'};
        my $quantity_3 = $marginsconf->{$coin}{'quantity_3'};
        my $maxsum_1 = $marginsconf->{$coin}{'maxsum_1'};
        my $maxsum_2 = $marginsconf->{$coin}{'maxsum_2'};
        my $maxsum_3 = $marginsconf->{$coin}{'maxsum_3'};

        bitvavo_cancelorders($base,$coin);

#        my $vav_btc_eur_price = decode_json(bitvavo_book_price("BTC","EUR"));
#        my $btc_eur_price = sprintf("%.2f", ($vav_btc_eur_price->{'bid'} + $vav_btc_eur_price->{'ask'})/2);
#        my $binance_book_price = decode_json(binance_book_price($base,"BTC"));
#        my $cex_price = sprintf("%.4f", ($binance_book_price->{'bidPrice'} + $binance_book_price->{'askPrice'})/2*$btc_eur_price);
        my $bitvavo_book_price = decode_json(bitvavo_book_price($base,$coin));
        my $cex_price = sprintf("%.4f", ($bitvavo_book_price->{'bid'} + $bitvavo_book_price->{'ask'})/2);
        my $bitvavo_depth = decode_json(bitvavo_depth($base,$coin));
#        print "btceur: $btc_eur_price, cex: $cex_price\n";

        if ( ($bitvavo_depth ne "1") && ($bitvavo_book_price ne "1") ) {
            my $maxbidprice = sprintf("%.4f", ($cex_price - $cex_price * $bidmargin_1));
            my $minaskprice = sprintf("%.4f", ($cex_price + $cex_price * $askmargin_1));
            $cex_bid_price_1 = sprintf("%.4f", (calc_bestprice_sum($bitvavo_depth->{'bids'},$maxsum_1,$coin) + 0.0001));
            $cex_ask_price_1 = sprintf("%.4f", (calc_bestprice_sum($bitvavo_depth->{'asks'},$maxsum_1,$coin) - 0.0001));
            if ( ( $cex_bid_price_1 eq "0.0001" ) || ( $cex_bid_price_1 > $maxbidprice ) ) { $cex_bid_price_1 = $maxbidprice; }
            if ( ( $cex_ask_price_1 eq "0.0001" ) || ( $cex_ask_price_1 < $minaskprice ) ) { $cex_ask_price_1 = $minaskprice; }

            $maxbidprice = sprintf("%.4f", ($cex_price - $cex_price * $bidmargin_2));
            $minaskprice = sprintf("%.4f", ($cex_price + $cex_price * $askmargin_2));
            $cex_bid_price_2 = sprintf("%.4f", (calc_bestprice_sum($bitvavo_depth->{'bids'},$maxsum_2,$coin) + 0.0001));
            $cex_ask_price_2 = sprintf("%.4f", (calc_bestprice_sum($bitvavo_depth->{'asks'},$maxsum_2,$coin) - 0.0001));
            if ( ( $cex_bid_price_2 eq "0.0001" ) || ( $cex_bid_price_2 > $maxbidprice ) ) { $cex_bid_price_2 = $maxbidprice; }
            if ( ( $cex_ask_price_2 eq "0.0001" ) || ( $cex_ask_price_2 < $minaskprice ) ) { $cex_ask_price_2 = $minaskprice; }

            $maxbidprice = sprintf("%.4f", ($cex_price - $cex_price * $bidmargin_3));
            $minaskprice = sprintf("%.4f", ($cex_price + $cex_price * $askmargin_3));
            $cex_bid_price_3 = sprintf("%.4f", (calc_bestprice_sum($bitvavo_depth->{'bids'},$maxsum_3,$coin) + 0.0001));
            $cex_ask_price_3 = sprintf("%.4f", (calc_bestprice_sum($bitvavo_depth->{'asks'},$maxsum_3,$coin) - 0.0001));
            if ( ( $cex_bid_price_3 eq "0.0001" ) || ( $cex_bid_price_3 > $maxbidprice ) ) { $cex_bid_price_3 = $maxbidprice; }
            if ( ( $cex_ask_price_3 eq "0.0001" ) || ( $cex_ask_price_3 < $minaskprice ) ) { $cex_ask_price_3 = $minaskprice; }

            bitvavo_setprice($base,$coin,$cex_bid_price_1,$cex_ask_price_1,$quantity_1);
            bitvavo_setprice($base,$coin,$cex_bid_price_2,$cex_ask_price_2,$quantity_2);
            bitvavo_setprice($base,$coin,$cex_bid_price_3,$cex_ask_price_3,$quantity_3);
        }
    }

} elsif ( $api eq "coinex" ) {
    my $json = read_file("$cwd/mpm.conf.coinex");
    my $marginsconf = decode_json($json);
    my $marginadd = binance_volat();

    foreach my $coin ( keys %{$marginsconf} ) {
        my $bidmargin_1 = sprintf("%.4f", $marginsconf->{$coin}{'bidmargin_1'} + $marginadd/15);
        my $bidmargin_2 = sprintf("%.4f", $marginsconf->{$coin}{'bidmargin_2'} + $marginadd/30);
        my $askmargin_1 = sprintf("%.4f", $marginsconf->{$coin}{'askmargin_1'} + $marginadd/15);
        my $askmargin_2 = sprintf("%.4f", $marginsconf->{$coin}{'askmargin_2'} + $marginadd/30);
        my $quantity_1 = $marginsconf->{$coin}{'quantity_1'};
        my $quantity_2 = $marginsconf->{$coin}{'quantity_2'};
        my $maxsum_1 = $marginsconf->{$coin}{'maxsum_1'};
        my $maxsum_2 = $marginsconf->{$coin}{'maxsum_2'};

        coinex_cancelorders($base,$coin);

        if ( $coin eq "BTC" ) {
            my $binance_book_price = decode_json(binance_book_price($base,$coin));
            $cex_price = sprintf("%.8f", ($binance_book_price->{'bidPrice'} + $binance_book_price->{'askPrice'})/2);
        } else {
            $cex_price = decode_json(coinex_latest_price($base,$coin))->{'data'}{'ticker'}{'last'};
        }
        my $coinex_depth = coinex_depth($base,$coin);

        if ( $coinex_depth ne "1" ) {
            my $maxbidprice = sprintf("%.8f", ($cex_price - $cex_price * $bidmargin_1));
            my $minaskprice = sprintf("%.8f", ($cex_price + $cex_price * $askmargin_1));
            if ( $coin eq "USDT" ) {
                $cex_bid_price_1 = sprintf("%.4f", (calc_bestprice_sum($coinex_depth->{'bids'},$maxsum_1,$coin) + 0.00010000));
                $cex_ask_price_1 = sprintf("%.4f", (calc_bestprice_sum($coinex_depth->{'asks'},$maxsum_1,$coin) - 0.00010000));
            } else {
                $cex_bid_price_1 = sprintf("%.8f", (calc_bestprice_sum($coinex_depth->{'bids'},$maxsum_1,$coin) + 0.00000001));
                $cex_ask_price_1 = sprintf("%.8f", (calc_bestprice_sum($coinex_depth->{'asks'},$maxsum_1,$coin) - 0.00000001));
            }
            if ( ( $cex_bid_price_1 eq "0.00000001" ) || ( $cex_bid_price_1 > $maxbidprice ) ) { $cex_bid_price_1 = $maxbidprice; }
            if ( ( $cex_ask_price_1 eq "0.00000001" ) || ( $cex_ask_price_1 < $minaskprice ) ) { $cex_ask_price_1 = $minaskprice; }

            $maxbidprice = sprintf("%.8f", ($cex_price - $cex_price * $bidmargin_2));
            $minaskprice = sprintf("%.8f", ($cex_price + $cex_price * $askmargin_2));
            if ( $coin eq "USDT" ) {
                $cex_bid_price_2 = sprintf("%.4f", (calc_bestprice_sum($coinex_depth->{'bids'},$maxsum_2,$coin) + 0.00010000));
                $cex_ask_price_2 = sprintf("%.4f", (calc_bestprice_sum($coinex_depth->{'asks'},$maxsum_2,$coin) - 0.00010000));
            } else {
                $cex_bid_price_2 = sprintf("%.8f", (calc_bestprice_sum($coinex_depth->{'bids'},$maxsum_2,$coin) + 0.00000001));
                $cex_ask_price_2 = sprintf("%.8f", (calc_bestprice_sum($coinex_depth->{'asks'},$maxsum_2,$coin) - 0.00000001));
            }
            if ( ( $cex_bid_price_2 eq "0.00000001" ) || ( $cex_bid_price_2 > $maxbidprice ) ) { $cex_bid_price_2 = $maxbidprice; }
            if ( ( $cex_ask_price_2 eq "0.00000001" ) || ( $cex_ask_price_2 < $minaskprice ) ) { $cex_ask_price_2 = $minaskprice; }

            coinex_setprice($base,$coin,$cex_bid_price_1,$cex_ask_price_1,$quantity_1);
            coinex_setprice($base,$coin,$cex_bid_price_2,$cex_ask_price_2,$quantity_2);
        }
    }

} elsif ( $api eq "vcc" ) {
    my $json = read_file("$cwd/mpm.conf.vcc");
    my $marginsconf = decode_json($json);

    foreach my $coin ( keys %{$marginsconf} ) {
        my $bidmargin = $marginsconf->{$coin}{'bidmargin'};
        my $askmargin = $marginsconf->{$coin}{'askmargin'};
        my $bidminmargin = $marginsconf->{$coin}{'bidminmargin'};
        my $askminmargin = $marginsconf->{$coin}{'askminmargin'};
        my $quantity_1 = $marginsconf->{$coin}{'quantity'};
        my $quantity_2 = $quantity_1/10;

        vcc_cancelorders($base,$coin);

        my $binance_book_price = decode_json(binance_book_price($base,$coin));
        my $cex_price = sprintf("%.8f", ($binance_book_price->{'bidPrice'} + $binance_book_price->{'askPrice'})/2);
        my $maxbidprice = sprintf("%.8f", ($cex_price - $cex_price * $bidminmargin));
        my $minaskprice = sprintf("%.8f", ($cex_price + $cex_price * $askminmargin));
        my $vcc_depth = vcc_depth($base,$coin);

        $cex_bid_price_1 = sprintf("%.8f", (calc_bestprice($vcc_depth->{'bids'},$quantity_1,$coin) + 0.00000001));
        $cex_ask_price_1 = sprintf("%.8f", (calc_bestprice($vcc_depth->{'asks'},$quantity_1,$coin) - 0.00000001));
        if ( ( $cex_bid_price_1 eq "0.00000001" ) || ( $cex_bid_price_1 > $maxbidprice ) ) { $cex_bid_price_1 = sprintf("%.8f", ($cex_price - $cex_price * $bidmargin)); }
        if ( ( $cex_ask_price_1 eq "0.00000001" ) || ( $cex_ask_price_1 < $minaskprice ) ) { $cex_ask_price_1 = sprintf("%.8f", ($cex_price + $cex_price * $askmargin)); }

        $cex_bid_price_2 = sprintf("%.8f", (calc_bestprice($vcc_depth->{'bids'},$quantity_2,$coin) + 0.00000001));
        $cex_ask_price_2 = sprintf("%.8f", (calc_bestprice($vcc_depth->{'asks'},$quantity_2,$coin) - 0.00000001));
        if ( ( $cex_bid_price_2 eq "0.00000001" ) || ( $cex_bid_price_2 > $maxbidprice ) ) { $cex_bid_price_2 = $maxbidprice; }
        if ( ( $cex_ask_price_2 eq "0.00000001" ) || ( $cex_ask_price_2 < $minaskprice ) ) { $cex_ask_price_2 = $minaskprice; }
        if ( $cex_ask_price_2 > $cex_ask_price_1 ) { $cex_ask_price_2 = $cex_ask_price_1; }
        if ( $cex_bid_price_2 < $cex_bid_price_1 ) { $cex_bid_price_2 = $cex_bid_price_1; }

        vcc_setprice($base,$coin,$cex_bid_price_1,$cex_ask_price_1,$quantity_1);
        vcc_setprice($base,$coin,$cex_bid_price_2,$cex_ask_price_2,$quantity_2);
    }

} else {
    print "API not found\n";
}

