#!/usr/bin/perl

use warnings;
use LWP::UserAgent;
use JSON;
use File::Slurp qw( read_file );
use File::Basename;
use Digest::SHA qw(hmac_sha256_hex);
#use Data::Dumper;


my $maxgasprice = 10;
my $cex_apikey = "";
my $cex_seckey = "";
my $base = "KMD";
my $userpass =  $ENV{'userpass'};
my $api = $ARGV[0];
my $cwd = dirname($0);
my $json = read_file("$cwd/mpm.conf");
my $marginsconf = decode_json($json);
my $quantity = $marginsconf->{$base}{'quantity'};


sub getgasprice {
    my $url = "https://www.etherchain.org/api/gasPriceOracle";
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub apipaprika {
    my $url = "https://api.coinpaprika.com/v1/price-converter?base_currency_id=".$_[1]."&quote_currency_id=".$_[0]."&amount=1";
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub apicmcpaid {
    my $baseurl = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?";
    my $ids = "id=";
    my $rel = "&convert=$_[0]";
    my $cmc_apikey = "&CMC_PRO_API_KEY=x";

    foreach my $coin ( keys %{$marginsconf} ) {
        my $cmcid = $marginsconf->{$coin}{'cmcid'};
        $ids .= $cmcid.",";
    }
    chop($ids);
    my $url = $baseurl.$ids.$rel.$cmc_apikey;
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub cex_latest_price {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.binance.com/api/v3/ticker/price?symbol=".$base.$coin;
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub cex_depth {
    my $base = $_[0];
    my $coin = $_[1];
    my $url = "https://api.binance.com/api/v1/depth?symbol=".$base.$coin."&limit=20";
    my $ua = LWP::UserAgent->new;
    $ua->agent("Mozilla");
    $ua->timeout(15);
    my $req = HTTP::Request->new(GET => $url);
    $req->header('content-type' => 'application/json');
    my $resp = $ua->request($req);
        if ($resp->is_success) {
            return $resp->content;
        } else {
            print "HTTP GET url: ", $url, "\n";
            print "HTTP GET error code: ", $resp->code, "\n";
            print "HTTP GET error message: ", $resp->message, "\n";
        }
}


sub cex_deleteprice {
    my $base = $_[0];
    my $coin = $_[1];
    my $quantity = $_[2];
    my $command = undef;
    my $signature = undef;
    my $body = undef;
    my $ua = LWP::UserAgent->new;
    my $req = undef;
    my $resp = undef;

    $req = HTTP::Request->new(DELETE => 'https://api.binance.com/api/v3/order');
    $req->header('X-MBX-APIKEY' => $cex_apikey);

    $command = "symbol=".$base.$coin."&origClientOrderId=mysellid".$quantity."&timestamp=".time()*1000;
    $signature = hmac_sha256_hex($command, $cex_seckey);
    $body = $command."&signature=".$signature;
    $req->content($body);
    $resp = $ua->request($req);
    #print $resp->content."\n";

    $command = "symbol=".$base.$coin."&origClientOrderId=mybuyid".$quantity."&timestamp=".time()*1000;
    $signature = hmac_sha256_hex($command, $cex_seckey);
    $body = $command."&signature=".$signature;
    $req->content($body);
    $resp = $ua->request($req);
    #print $resp->content."\n";
}


sub cex_setprice {
    my $base = $_[0];
    my $coin = $_[1];
    my $bid = sprintf("%.7f",$_[2]);
    my $ask = sprintf("%.7f",$_[3]);
    my $quantity = $_[4];
    my $command = undef;
    my $signature = undef;
    my $body = undef;
    my $ua = LWP::UserAgent->new;
    my $req = undef;
    my $resp = undef;

    $req = HTTP::Request->new(POST => 'https://api.binance.com/api/v3/order');
    $req->header('X-MBX-APIKEY' => $cex_apikey);

    if ( defined $ask ) {
	$command = "symbol=".$base.$coin."&side=SELL&type=LIMIT_MAKER&newOrderRespType=RESULT&quantity=".$quantity."&price=".$ask."&newClientOrderId=mysellid".$quantity."&timestamp=".time()*1000;
        #print "$command\n";
	$signature = hmac_sha256_hex($command, $cex_seckey);
        $body = $command."&signature=".$signature;
        $req->content($body);
        my $resp = $ua->request($req);
        print $resp->content."\n";
    }

    if ( defined $bid ) {
        $command = "symbol=".$base.$coin."&side=BUY&type=LIMIT_MAKER&newOrderRespType=RESULT&quantity=".$quantity."&price=".$bid."&newClientOrderId=mybuyid".$quantity."&timestamp=".time()*1000;
        #print "$command\n";
        $signature = hmac_sha256_hex($command, $cex_seckey);
        $body = $command."&signature=".$signature;
        $req->content($body);
        $resp = $ua->request($req);
        print $resp->content."\n";
    }
}


sub dex_setprice {
    my $price = $_[2];
    my $bid = undef;
    my $ask = undef;
    my $command = undef;

    if ( defined $marginsconf->{$_[1]}{'askmargin'} ) {
        $ask = sprintf("%.8f", $price + $price * $marginsconf->{$_[1]}{'askmargin'});
    }
    if ( defined $marginsconf->{$_[1]}{'bidmargin'} ) {
        $bid = sprintf("%.8f", 1 / ($price - $price * $marginsconf->{$_[1]}{'bidmargin'}));
    }

    my $ua = LWP::UserAgent->new;
    my $req = HTTP::Request->new(POST => 'http://127.0.0.1:7783');
    $req->content_type('application/x-www-form-urlencoded');

    if ( defined $ask ) {
        $command = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$_[1].'","rel":"'.$_[0].'","price":'.$ask.'}';
        $req->content($command);
        my $resp = $ua->request($req);
        print "$_[1]/$_[0] $ask ".$resp->content."\n";
    }

    if ( defined $bid ) {
        $command = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$_[0].'","rel":"'.$_[1].'","price":'.$bid.'}';
        $req->content($command);
        $resp = $ua->request($req);
        print "$_[0]/$_[1] $bid ".$resp->content."\n";
    }
}


sub dex_deleteprice {
    my $command = undef;
    my $ask = 0;
    my $bid = 0;

    my $ua = LWP::UserAgent->new;
    my $req = HTTP::Request->new(POST => 'http://127.0.0.1:7783');
    $req->content_type('application/x-www-form-urlencoded');

    $command = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$_[1].'","rel":"'.$_[0].'","price":'.$ask.'}';
    $req->content($command);
    my $resp = $ua->request($req);
    print "$_[1]/$_[0] $ask ".$resp->content."\n";

    $command = '{"userpass":"'.$userpass.'","method":"setprice","base":"'.$_[0].'","rel":"'.$_[1].'","price":'.$bid.'}';
    $req->content($command);
    $resp = $ua->request($req);
    print "$_[0]/$_[1] $bid ".$resp->content."\n";
}


$base = "KMD";
my $coin = "BTC";
my $minmargin = $marginsconf->{$base}{'minmargin'};
my $gasprice = from_json(getgasprice())->{'standard'};
my $cex_bid_price_full = undef;
my $cex_ask_price_full = undef;
my $cex_bid_price_half = undef;
my $cex_ask_price_half = undef;

if ( $api eq "cmcpaid" ) {
    my $prices = apicmcpaid($base);
    if ( defined $prices ) {
        foreach my $coin ( keys %{$marginsconf} ) {
            my $cmcid = $marginsconf->{$coin}{'cmcid'};
            my $erc20 = $marginsconf->{$coin}{'erc20'};
            if ( !defined $erc20 ) { $erc20 = "0"; }
            my $price = from_json($prices)->{'data'}{$cmcid}{'quote'}{$base}{'price'};
            if ( $base ne $coin ) {
                if ( $erc20 eq "0" ) {
                    dex_setprice($base,$coin,$price);
                } elsif ( ($erc20 eq "1") && ($gasprice < $maxgasprice) ) {
                    dex_setprice($base,$coin,$price);
                } else {
                    dex_deleteprice($base,$coin);
                }
            }
        }
    }
} elsif ( $api eq "coinpaprika" ) {
    my $basepapid = $marginsconf->{$base}{'papid'};
    foreach my $coin ( keys %{$marginsconf} ) {
        my $price = undef;
        my $papid = $marginsconf->{$coin}{'papid'};
        my $erc20 = $marginsconf->{$coin}{'erc20'};
        if ( !defined $erc20 ) { $erc20 = "0"; }
        my $coinprice = apipaprika($basepapid,$papid);
        if ( $coinprice ne "1" ) { $price = from_json($coinprice)->{'price'}; }
        if ( $base ne $coin ) {
            if ( ($erc20 eq "0") && (defined $price) ) {
                dex_setprice($base,$coin,$price);
            } elsif ( ($erc20 eq "1") && ($gasprice < $maxgasprice) && (defined $price) ) {
                dex_setprice($base,$coin,$price);
            } else {
                dex_deleteprice($base,$coin);
            }
        }
    }
} else {
    print "API not found\n";
    exit 1;
}

cex_deleteprice($base,$coin,$quantity);
cex_deleteprice($base,$coin,$quantity/2);

my $cex_price = decode_json(cex_latest_price($base,$coin))->{'price'};
#print "lastprice: $cex_price\n";
my $cex_depth = decode_json(cex_depth($base,$coin));
#print Dumper($cex_depth);
my $maxbidprice = sprintf("%.7f", ($cex_price - $cex_price * $minmargin));
my $minaskprice = sprintf("%.7f", ($cex_price + $cex_price * $minmargin));

foreach (@{$cex_depth->{'bids'}}) {
    my @array = $_;
    my $price = $array[0][0];
    my $volume = $array[0][1];
    if ( $volume > $quantity ) {
        $cex_bid_price_full = $price + 0.00000010;
        last;
    }
}

foreach (@{$cex_depth->{'asks'}}) {
    my @array = $_;
    my $price = $array[0][0];
    my $volume = $array[0][1];
    if ( $volume > $quantity ) {
        $cex_ask_price_full = $price - 0.00000010;
        last;
    }
}

#print "cexbid: $cex_bid_price_full\n";
#print "maxbid: $maxbidprice\n";
if ( ( !defined $cex_bid_price_full ) || ( $cex_bid_price_full > $maxbidprice ) ) { $cex_bid_price_full = sprintf("%.7f", ($cex_price - $cex_price * $marginsconf->{$base}{'bidmargin'})); }
#print "bid: $cex_bid_price_full\n";

#print "cexask: $cex_ask_price_full\n";
#print "minask: $minaskprice\n";
if ( ( !defined $cex_ask_price_full ) || ( $cex_ask_price_full < $minaskprice ) ) { $cex_ask_price_full = sprintf("%.7f", ($cex_price + $cex_price * $marginsconf->{$base}{'askmargin'})); }
#print "ask: $cex_ask_price_full\n";

cex_setprice($base,$coin,$cex_bid_price_full,$cex_ask_price_full,$quantity);

foreach (@{$cex_depth->{'bids'}}) {
    my @array = $_;
    my $price = $array[0][0];
    my $volume = $array[0][1];
    if ( $volume > $quantity/2 ) {
        $cex_bid_price_half = $price + 0.00000010;
        last;
    }
}

foreach (@{$cex_depth->{'asks'}}) {
    my @array = $_;
    my $price = $array[0][0];
    my $volume = $array[0][1];
    if ( $volume > $quantity/2 ) {
        $cex_ask_price_half = $price - 0.00000010;
        last;
    }
}

#print "cexbid: $cex_bid_price_half\n";
#print "maxbid: $maxbidprice\n";
if ( ( !defined $cex_bid_price_half ) || ( $cex_bid_price_half > $maxbidprice ) ) { $cex_bid_price_half = sprintf("%.7f", ($cex_price - $cex_price * $marginsconf->{$base}{'bidmargin'})); }
#print "bid: $cex_bid_price_half\n";

#print "cexask: $cex_ask_price_half\n";
#print "minask: $minaskprice\n";
if ( ( !defined $cex_ask_price_half ) || ( $cex_ask_price_half < $minaskprice ) ) { $cex_ask_price_half = sprintf("%.7f", ($cex_price + $cex_price * $marginsconf->{$base}{'askmargin'})); }
#print "ask: $cex_ask_price_half\n";

if ( $cex_ask_price_half >= $cex_ask_price_full ) { $cex_ask_price_half = $cex_ask_price_full - 0.00000010; }
if ( $cex_bid_price_half <= $cex_bid_price_full ) { $cex_bid_price_half = $cex_bid_price_full + 0.00000010; }

cex_setprice($base,$coin,$cex_bid_price_half,$cex_ask_price_half,$quantity/2);

